var db = require("./db");

var dao, opened = false;
module.exports = dao = {
	_db:db,

	insertBook:function(obj){
		/* name,type,buytime,buyplace,link,img,howtoget,why,think,worth,suggest */
	},
	getBook:function(id,cb){
		return db.collection('books', function(err, bookColls) {
 			bookColls.find({seqNo:parseInt(id,10)}).toArray(cb);
	   	});	
	},
	getBooks:function(cb){
 		db.collection('books', function(err, bookColls) {
 			bookColls.find({}).toArray(cb);
	   	});	
	},
	getBooksFake:function(cb){
		return cb(null,[
			{
				seqNo:1,
				author:"TonyQ",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344096070.A.FAF.html",
				postDate:"2012/8/5 00:01",
				pttcomments:6,

				name :"JavaScript 優良部份",
				type :"翻譯書",
				buytime:"2009/10 (?)",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010410726",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/6/0010410726.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"從朋友那邊看到，翻了幾頁覺得值得買就自己買了。",
				think :"         以前對 good practice 跟 bad practice 的分界不太瞭解，         看完這本書後最大的收穫是，其實不是每個語言特性都值得用到底，          很多容易造成麻煩的語言特性是根本不應該去碰的。           對一些過去曾經碰過得問題也覺得有回味的感覺，         會覺得如果早幾年看到這本書就好了。           他本身並不是基礎教學型的，但是他是\"防雷\"型的書，         讀了這本書可以增加自己對 JS 的\"品味\" ，知道什麼情況下容易出問題。          相當推薦給會一直接觸的 JS user 作為進階讀物。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:2,
				author:"iceonly",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344128534.A.311.html",
				postDate:"2012/8/5 09:02",
				pttcomments:2,

				name :"SCJP Java 6專業認證手冊",
				type :"翻譯書",
				buytime:"2009/10 (?)",
				buyplace:"諾貝爾書局",
				link :"http://www.kingstone.com.tw/book/book_page.asp?kmcode=2014713104410",
				img :"http://img.kingstone.com.tw/Book/images/Product/20147/2014713104410/2014713104410b.jpg",
				howtoget :"購買",
				why :"當初想考證照，買完猛虎覺得寫得很爛就去買另一本書了",
				think :"這本書與其說是考證照用的參考書不如說是一本通用的java教課書。\n該作者同時也是head first java的作者，這本書也有他的影子，\n不但敘述淺顯易懂又夠詳盡(當然只到證照範圍內，不過也夠了)，\n對於一些常犯的錯誤也會特別提出來，至少修正了很多我以前犯的毛病。\n就算光就概念教學的部份也勝過之前在大學時讀的教課書。\n\n要說缺點的部份就是這本畢竟只有提到SCJP的考試範圍，\n因此沒有Thinking in Java來的廣和深，也沒有像它一樣有比較複雜的範例。\n(當然大量的snippets還是有的)\n如果Thinking in Java對你來講太難又想搞好觀念的話就值得讀一下這本。\n\n--當然如果你要考證照的話更應該讀這本，猛虎請當成題庫謝謝--\n",
				worth :"Yes",
				suggest:"****"
			}
		]);
	},
	insertDefaultBook : function(){
		var books = [
			{
				seqNo:1,
				author:"TonyQ",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344096070.A.FAF.html",
				postDate:"2012/8/5 00:01",
				pttcomments:6,

				name :"JavaScript 優良部份",
				type :"翻譯書",
				buytime:"2009/10 (?)",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010410726",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/6/0010410726.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"從朋友那邊看到，翻了幾頁覺得值得買就自己買了。",
				think :"         以前對 good practice 跟 bad practice 的分界不太瞭解，         看完這本書後最大的收穫是，其實不是每個語言特性都值得用到底，          很多容易造成麻煩的語言特性是根本不應該去碰的。           對一些過去曾經碰過得問題也覺得有回味的感覺，         會覺得如果早幾年看到這本書就好了。           他本身並不是基礎教學型的，但是他是\"防雷\"型的書，         讀了這本書可以增加自己對 JS 的\"品味\" ，知道什麼情況下容易出問題。          相當推薦給會一直接觸的 JS user 作為進階讀物。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:2,
				author:"iceonly",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344128534.A.311.html",
				postDate:"2012/8/5 09:02",
				pttcomments:2,

				name :"SCJP Java 6專業認證手冊",
				type :"翻譯書",
				buytime:"2009/10 (?)",
				buyplace:"諾貝爾書局",
				link :"http://www.kingstone.com.tw/book/book_page.asp?kmcode=2014713104410",
				img :"http://img.kingstone.com.tw/Book/images/Product/20147/2014713104410/2014713104410b.jpg",
				howtoget :"購買",
				why :"當初想考證照，買完猛虎覺得寫得很爛就去買另一本書了",
				think :"這本書與其說是考證照用的參考書不如說是一本通用的java教課書。\n該作者同時也是head first java的作者，這本書也有他的影子，\n不但敘述淺顯易懂又夠詳盡(當然只到證照範圍內，不過也夠了)，\n對於一些常犯的錯誤也會特別提出來，至少修正了很多我以前犯的毛病。\n就算光就概念教學的部份也勝過之前在大學時讀的教課書。\n\n要說缺點的部份就是這本畢竟只有提到SCJP的考試範圍，\n因此沒有Thinking in Java來的廣和深，也沒有像它一樣有比較複雜的範例。\n(當然大量的snippets還是有的)\n如果Thinking in Java對你來講太難又想搞好觀念的話就值得讀一下這本。\n\n--當然如果你要考證照的話更應該讀這本，猛虎請當成題庫謝謝--\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:3,
				author:"Ageis",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344134178.A.DC4.html",
				postDate:"2012/8/5 10:36",
				pttcomments:0,

				name :"軟體建構之道 Code complete",
				type :"翻譯書",
				buytime:"應該是2009或2010年吧…我真的忘了",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010381229",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/9/0010381229.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"在同事的桌上看到這本書，借來翻幾頁之後發現驚為天人",
				think :"         如果有打算在這行待一輩子，請將這本書列入你的必讀清單\n        作者在本書中談到軟體開發中的各種議題，本書用了很棒的\n        隱喻及範例幫助讀者了解，讀完後我覺得腦袋被翻了好幾遍\n\n        我個人特別愛以下這句\n\n        \"如果您以龐迪亞克的設計為出發點，產品再怎麼測試也不會變成勞斯萊斯\"\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:4,
				author:"kewang",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344138662.A.C71.html",
				postDate:"2012/8/5 11:50",
				pttcomments:6,

				name :"Android核心剖析",
				type :"翻譯書",
				buytime:"2012/07",
				buyplace:"天瓏",
				link :"http://findbook.tw/book/9789572240328/basic",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/9/0010381229.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"市面上介紹Android的開發書，大都是在教UI如何使用，要不然就是寫一堆很少用到的元件。真正在講Android底層原理的(非native layer)，一本都沒看到過(原文書可能有)。上個月看到同事他買了這本，翻了一下覺得超棒，當天就衝到天瓏買了一本。當然，天瓏老闆也說了「最近這本一堆人在買」。所以就買下去了。",
				think :"一般在開發Android常用到的Activity, View，甚至是比較少用到的Window，書中用幾乎佔了80%以上的篇幅在講解內部原理。比如說TouchEvent的傳遞、Activity的Life cycle、IME的focus、View的繪圖原理，講的非常詳細。然後「一定愛配Source Code」，這樣子任督二脈就全打通了。\n台灣就是少了這種講解原理的書，每次在開發Android遇到問題的時候，不是上StackOverflow，要不然就只能上大陸的blog找答案。雖然這本是簡體翻為正體的，不過真的非常推薦！",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:5,
				author:"aaroms",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344153931.A.12A.html",
				postDate:"2012/8/5 16:05",
				pttcomments:6,

				name :"學徒模式：優秀軟體開發者的養成之路",
				type :"翻譯書",
				buytime:"2012/07",
				buyplace:"天瓏",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010513685",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/5/0010513685.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"在博客來上閒晃看到介紹覺得不錯就購入",
				think :"        很有意思的一本書，頁數不多，內容編排方式非常獨特，可以說是開發者的勵志書，當你選擇走向軟體開發者的這條漫漫長路，在這條路上，你可能會遇到的各種情境，你可能遇到的狀況、問題、瓶頸，在閱讀這本小書時，我個人產生了非常大的共鳴，那是一種在這個行業中所遭遇的心境上的問題，在軟體開發者成長的各種階段，這本書能增加的不是你個人技術上的硬實力而是身為軟體開發者在實際層面之上的軟實力。\n\n這本書每一個小段落的篇幅都很短，而且可以跳著閱讀，但每一個篇幅都是你在技術成長的過程中可能會遇到的問題與情境，以及如何去改善與解決。",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:6,
				author:"legendmtg",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344161338.A.1B0.html",
				postDate:"2012/8/5 18:08",
				pttcomments:2,

				name :"敏捷軟體開發 原則、樣式及實務",
				type :"翻譯書",
				buytime:"2009",
				buyplace:"天瓏",
				link :"http://www.tenlong.com.tw/items/9861541489?item_id=25936",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/26120/medium/9861541489.jpg",
				howtoget :"購買",
				why :"忘了....",
				think :"書名是敏捷軟體開發，但是絕對不是一本只講 Agile Method 的書，對於 OOP 、 OOD 和 Design Pattern 這都是一本很棒的入門書，書中的所使用例子非常實際，很容易在一個案例或故事中了解作者所要表達的東西。\n\n相關類型/議題的書中這本是我最推薦的",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:7,
				author:"lihgong",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344175914.A.291.html",
				postDate:"2012/8/5 22:11",
				pttcomments:1,

				name :"Programming from the ground up",
				type :"英文書",
				buytime:"",
				buyplace:"Internet",
				link :"http://ftp.twaren.net/Unix/NonGNU/pgubook/",
				img :"http://content.screencast.com/users/TonyQ/folders/Jing/media/807be026-a454-4bef-bcee-e62d2df282d7/2012-09-16_1611.png",
				howtoget :"免費下載",
				why :"想了解程式底層運作的概況",
				think :" \n----------\n\n因為我讀完這本書有寫note\n所以順便把寫好的note貼在這裡\n文章同步刊載在\nhttp://lihgong.blogspot.tw/2010/03/programming-from-ground-up.html\n\n\n----------\n\n\n\n\n[書評] Programming from the Ground Up\nProgramming from the Ground Up\nhttp://ftp.twaren.net/Unix/NonGNU/pgubook/\n\n(免費下載)\n\n\n----\n\n\n這是一本觀點獨特的書, 他用組合語言的方式, 闡述程式最底層的世界\n這樣講聽來有點空洞, 直接看這本書第一個程式吧\n\n\nChapter 3. Your First Programs\n\n\n----\n\n\n.section .text\n\n.global _start\n\n_start:\n\nmovl $1, %eax\nmovl $0, %ebx\nint $0x80\n\n\n這是 Linux底下, 一段小到不能再小的程式\n程式從 _start 進入, 然後設定 x86 暫存器: %eax = 1, %ebx = 0\nint $80 是發出軟體中斷的指令, 其中 0x80 代表 Linux System Call\n\n呼叫 System Call 的時候\n%eax 放 system call ID, 1 表示離開程式\n%ebx 表示 main function 的 return value\n\n呼叫完這個 system call, Linux 就會結束程式\n並把 %ebx 的內容當作 main() 的回傳值\n\nUser 接下來可以在 shell 裡, 打 echo $? 觀察這個回傳值\n\n\n----\n\n\n這個例子真的口味獨特 !!\n\n他解釋一般程式是怎麼和 OS 溝通, 怎麼呼叫 system call\n另外用很少的程式碼, 解釋組合語言的設施\n看過這一小段程式, 起碼我知道, 當我呼叫 exit() 時, 原來做了這些事\n\n書上還有用組合語言, 寫一小段程式, 開檔, 把所有字轉大寫, 存檔, 關檔\nWHAT !! 用組合語言做這些事喔 !!\n當我親自寫了這段程式, 心中的感動是無以言喻的 :)\n\n推薦給所有想知道事物真正面貌的人閱讀 :)\n\n\n----\n\n\nChapter 4 \"All About Functions\"\n\n函數, 對應到的 assembly 語言, 這個是極端重要的 topic\n靠這章的幫忙, 我總算是懂 x86的 stack frame\n而且也真的寫了一些 assembly function 來呼叫\n\n這章的範例是一個函數, 計算 2^3 + 2^5, 然後回傳\n\n書上的玩法是從頭到尾都用 assembly, 我是先寫 C 版本, 搭配一個 main() 呼叫\n\nint power(int base, int exp)\n{\n int ret = 1;\n for(i=0; i< exp; i++)\n ret *= base;\n return ret;\n}\n\n下一步, 把 power() 改成用 assembly 寫, 混用 assembly 和 C\n最後, 再把整個 C 都換成 assembly, 這樣玩下來收穫良多\n\n\n----\n\n\nChapter 5 Dealing with Files\n\n看到這章的標題, 我還真的懷疑看錯了... 檔案處理耶 !!\n一般的檔案處理依賴神秘的 fopen/fwrite/fread, 或是底層的 open/read/write\n書上告訴你, 這些東西都是藉由 OS 的 system call 完成\n\n在呼叫 system call 之前, 把對應的 call ID 和參數放在暫存器裡\n然後執行 INT 0x80, OS就會接手剩下的任務了\n這章節真的很不錯, 隱藏在 open/read/write 底下的細節, 全部都出來了\n而且用組合語言, 自己寫 open/read/write, 成就感滿點 !!\n\n實現的手段和 chapter.4 一樣, 先用 C 刻出骨架, 再逐漸換成組合語言\n我不知道這樣做對不對, 對 C我的掌握度高, 而且有骨架比較容易驗證 assembly\n全系統直接從 assembly 開始寫, 我想我受不了 XD\n\n\n----\n\n\nChapter 6 \"Reading and Writing Simple Record\"\n\n這章揭露怎麼處理 struct (C 語言), 搭配 chapter 5 的檔案處理\n我覺得受到的刺激沒有上一章那麼強悍\n而且看到組語的數目直線上升, 我有點受不了了 XD\n\n\n----\n\n\nChapter 7 \"Developing Robust Programs\"\n\n這章有點像講軟體工程, 他告訴你程式設計師拙於估算 schedule XD\n書上給了幾個建議, 基本上是 \"testing-driven\" 程式設計方式\n有種開發方式建議在撰寫程式碼之前, 先寫好 test case\nTest case 日後可以反覆驗證程式, IC的 test bench 就是類似的觀點\n\n\n----\n\n\nChapter 8 \"Sharing Functions with Code Libraries\"\n\n站在巨人的肩膀上, 所以我們在 Standard C Library 的基礎上寫程式\n不然連 printf() 都得自己寫, 實在是太難過了\n\n這章用深入淺出的方式, 介紹怎麼連結函式庫, 對應的 Linker 指令怎麼下\n這一小段指令值得寫在這裡...\n\nas helloworld.s -o helloworld.o\nld -dynamic-linker /lib/ld-linux.so.2 helloworld.o -lc -o helloworld\n\n-dynamic-linker /lib/ld-linux.so.2 指示 Linker 去哪裡找 dynamic linker\n-lc 表示連結 LIBC (Library C), 實際會連結到 /lib/libc.so.6\nhelloworld.o 表示連結的目標 (我們寫的程式)\n-o helloworld 代表 linker 的輸出是 helloworld\n\n書上最後一個範例, 作者介紹怎麼產生 shared library\n我最近才剛在 debug 時, 感受過這些機制的威力, 看這章特別有感覺\nShared library 機制用範例講, 真的是無比清楚\n\n\n----\n\n\nChapter 9 \"Intermediate Memory Topics\"\n\n\"The Memory Layout of a Linux Program\"\n搭配 Jserv 的 \"深入淺出Hello World, 這裡看得到完整的記憶體配置\n\n搭配 memory layout, 作者揭示了動態配置記憶體和 OS 之間的關聯\n原來配置記憶體, 也是搭配 system call, 用 C++ 的 new/delete\n最好知道底層\"可能\"的實作細節, 比較好\n\n作者很有意思, 竟然用 assembly 寫了一套 new / delete 的程式庫 (雖然效能很差)\n我很喜歡這個範例, 比如他透過實作, 告訴你 new 要記憶體時, 其實多要了一些\n他在前面偷偷塞了一些資料, 從記憶體區塊中間把指標回傳\n所以說, 小筆資料儘量不要用動態配置, 根本的原因在這裡 (overhead大)\n\n這一章整體碰觸的 topic 很複雜, 但是作者拿捏的洽到好處, 值得一看\n\n\n----\n\n\nChapter 10 \"Counting Like a Computer\"\n\n2's complement\nBinary <-> decimal\nAND/OR/XOR logical operation\nBit-Wise operation\nBig/Little Endian\n\n像我這種每天被 fixed point 運算折磨的人, 這章是選擇直接跳過\n畢竟我可是每天用身體感受啊\n\n\n----\n\n\nChapter 11 \"High-Level Language\"\nChapter 12 \"Optimization\"\nChapter 13 \"Moving On from Here\"\n\n這三章都比較短, 比較沒有我喜歡的底層的東西, 我當故事書很快的讀過\n\n\n----\n\n\nAppendix A. GUI Programming\n\n用 gtk 在 Linux 上寫視窗程式... 而且是用 assembly... 算了...\n\n\n----\n\n\nAppendix B. Common x86 Instructions\n\n這是一個不錯的 reference, 他還簡單的介紹 assembler 的虛指令 (directive)\n基本上這些資料真的要找, google一大堆\n\n\n----\n\n\nAppendix C. Important System Calls\n\nLinux 一些書上出現過的 system call 列表\n\n\n----\n\n\nAppendix D. ASCII Codes\n\n\n----\n\n\nAppendix E. C Idioms in Assembly Language\n\n值得一看, 可以大概認識平常用的 C, 會怎麼對應到組語 (for x86)\n\n\n----\n\n\nAppendix F. Using GDB Debugger\n\n托這本書的福? 我總算會用 GDB debug 了\n用命令下中斷, 單步執行, 印 call stack 實在很有意思 (也很不直覺)\n我覺得 GDB 值得學, 看完這本書, 我又多一個 debug 的武器了\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:8,
				author:"lihgong",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344176315.A.50E.html",
				postDate:"2012/8/5 22:18",
				pttcomments:2,

				name :"ARM System Developer's Guide",
				type :"英文書",
				buytime:"",
				buyplace:"Internet",
				link :"http://www.amazon.com/ARM-System-Developers-Guide-Architecture/dp/1558608745",
				img :"http://ecx.images-amazon.com/images/I/41JKM615IML._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg",
				howtoget :"Internet",
				why :"想了解 ARM 相關底層的知識",
				think :"後面有附上讀書的筆記, 這本書深入淺出講了ARM所有細節\n可惜的地方是, 他已經很久沒更新了, 新的Cortex系列都沒有涵蓋\n書中有段在講, 如何寫出高效率的C code, 如果整本書只能挑一章來讀\n那就是chapter 5: Efficient C Programming\n\n    -----\n\n同步刊載於\nhttp://lihgong.blogspot.tw/2010/01/arm-system-developers-guide.html\n\n-----\n\n\n[書評] ARM System Developer's Guide\nARM System Developer's Guide\n\nDesigning and Optimizing System Software\n\nhttp://www.arm.com/documentation/books/4975.html\n\n\n----\n\n\n這本書是聖經等級的書, 有興趣的人, 我相信很多地方都可以取得 PDF 檔\n在新竹 NOVA 書耕也有翻譯的中文書可以看\n\n總而言之, 推薦 !!\n\n如果修過 computer architecture 的人, 看這本書會更有感覺\n這一系列的連載將會把我讀過的心得陸續寫上\n\n\n----\n\n\nChapter 1\n\nARM Embedded Systems\n\n這一章是嵌入式簡介, 在很多地方都看得到類似的文字\n不知道什麼是嵌入式系統的人可以看看\n\n\n----\n\n\nChapter 2\n\nARM Processor Fundamentals\n\n在 ARM上寫程式, 瞭解 ARM architecture 是必要的\n這顆 CPU 有以下的特性...\n\n* 16 General Purpose Registers\n* Support ARM(32-bit), Thumb(16-bit), Jazelle(8-bit) instruction sets\n* Conditional Execution (很威的功能)\n\n這一章針對這些特性作概略性的描述, 真的要精通, 寫點 ARM 組語是免不了的\n\n另外 2.7 ARM Processor Families 這一章也很有意思\n他列出 ARM7 ~ ARM11 常見的型號, 以及代表的意義\n\nARM7 ARM9 ARM10 ARM11\nTypical Mhz 80 150 260 335\nmW/Mhz [44;1m0.06 [m 0.19 0.5 0.4\n+cache +cache +cache\nMIPS/MHZ 0.97 1.1 1.3 1.2\n\n從上面這張表來看, ARM7 有極低的耗電量, 不錯的效能, 難怪會暢銷了...\n\n\n----\n\n\nChapter 3\n\nIntroduction to the ARM Instruction Set\n\n所有講 ARM 的書都會介紹指令集, 但是這一本書講得更詳細\n比如 ARM 因為內建一個 Barrel Shifter, 可以做些很特別的操作\n\nexample: R3 = R1 + 2*R2\n-> R3 = R1 + (R1 << 1)\n\n-> add R3, R1, [44;1mR2, LSL #1 [m\n\nARM 指令中, 其中一個 operand 都可以做這種 shift operation\n上面這種運算經常出現在程式中, 善用 CPU 的特性, 就能少掉好幾道指令\n\nARM 的 conditional execution 也是極有特色的指令編碼\n書中舉了算最大公因數為例, 說明 conditional exection 的威力\n\nARM 在一些特定的型號, 也提供 DSP 指令支援, 例如 MAC (multiply-add-accumulate)\n還有 CLZ (count-leading-zero), 還有些 Saturated Add 指令\n\n藉著讀 ARM 的指令集, 能瞭解這顆 CPU 的確切能力, 以及限制\n\n\n----\n\n\nChapter 4\n\nIntroduction to the THUMB Instruction Set\n\nTHUMB 是 ARM 的 16-bit 指令集, 執行效能比較差, 但是程式碼比較短\n在手機上, Flash 也斤斤計較的場合, 這種指令集就有他的用處了\n\nARM 能支援 32-bit 和 16-bit 指令互相切換, 具體切換的方式書上有寫\n切換的程式段叫 veneer (我第一次看到這個詞, 完全不知道在說什麼)\n\n這一章看看即可\n\n\n--\n\nChapter 5\nEfficient C Programming\n\n這本書約 700 pges, 如果只想看精華, 就是這一章了\n這章的主題是 C code 和 assembly 之間的對應\n我一直到學會這件事, 才敢小聲的說, 我會一點 C 程式設計\n\n\n這章包括了...\n\nBasic C data types\n\nC 語言很多 data type 都有 machinie level 的支援\n了解機器對這些 data type 的支援, 是了解 C -> assembly 的重要關鍵\n\n寫 C 時經常會宣告 local variable, 他們在機器底層的對應都是 register\n就算放到 stack 去, 也是一個又一個 32-bit 的數值\n所以除非是陣列, 不然直接宣告 unsigned int 即可\n\nFunction parameter 也是重要的點, function參數直接宣告成 u32/ s32\n執行效能最好, 書上用 assembly 的觀點解釋這些事\n\nC Looping Structure\n\n迴圈怎麼寫效果最好, 執行速度最快, 這一段書上用組合語言有精闢的分析\n現代 compiler 已經能做好很多事, 如果了解 compiler 最佳化的方式和限制\n對程式功力會有大幅的幫助\n\nRegister Allocation / Function Calls\n\n了解呼叫函數時 compiler 是怎麼配置暫存器, 對於寫好程式極重要\n這個主題也是寫 C 程式的重要課題, 怎麼平衡函數的 overhead 和結構化設計\n\nPointer Aliasing\n\n這章講解 compiler 沒辦法把 code 最佳化的原因, 值得細讀\n\nStructure Arrangement\n\nC 語言宣告的 structure, 怎麼對應到記憶體配置, 這是 C 的進階主題\n這也是每個 C programmer 需要知道的事\n\nConvert Division to Multiplication\n\n\nOthers...\n\n\nChapter 6\nWriting and Optimizing ARM Assembly Code\n\n\n如果有一天, 有人逼你用組語寫程式, 對某段程式做最佳化, 讀這一章就對了.\n如果沒有, 這一章可以當作增廣見聞來讀\n\n\nPipeline 的處理器都各種 dependency 要 handle\n寫組語的好處是, 程式設計師可以調整指令的順序, 避開這些限制\n\n這一章讀起來的感覺很像 Computer Architecture/ Organization.\n只是那兩本聖經本用 MIPS 舉例, 這章用 ARM 舉例\n\n\nARM 很有特色的 conditional execution 這一章也有說明\n善用這些指令, 能很漂亮的避開 branch 指令\n\n\n\nChapter 7\nOptimized Primitives\n\n這一章其實可以跳過, 有需要再回來看\n\n他講了包括平方根, 除法, log/sin/cos/exp, bit-reversal, 這些運算的作法\n老實講, 沒有實際上用, 還真的很難讀下去 XD\n\n\n\nChapter 8\nDigital Signal Processing\n\n老實講, 用 ARM 來做 DSP, 那鐵定是找自己麻煩的 XD\n\n有些 ARM 有 DSP extension, 其實讀讀這些章節, 也可以理解 DSP 需要哪些指令支援\n這章教你怎麼實作 FIR/ IIR/ FFT, 有需要再回來看\n\n\n全書從這一章開始, 進入一些 Embedded System 的主題\n這些主題比較接近怎麼 plan 一個完整的系統, designer 有哪些東西可用\n\n我覺得每一章都有可讀之處, 接下來, 連載繼續了\n\n\nChapter 9\nException And Interrupt Handling\n\n中斷的處理是每顆 CPU 的重要主題, 這一章提示了 ARM 的中斷模型\n一般的 CPU 中斷其實都不複雜, 事件來了, CPU 會跳去某個地方執行指令\n\n\n反倒是軟體這裡的控制, 花樣多很多\n\n\n有時候我們希望中斷反應時間很快, 希望中斷還沒結束, 就開啟中斷\n這樣軟體的架構就會複雜很多\n\n其實故事多發生在軟體這裡, 這一章講了好幾種 IRQ handling 的方式\n我看了幾種就受不了了(笑), 自己以前玩的就是最簡單的\n哪天有興致, 再來實作其他方式\n\n\n\nChapter 10\nFirmware\n\n這章很短, 他簡單介紹了 bootloader 的故事\nbootloader 一開始都會有一段組合語言, 這章講解了其中一段, 值得一看\n\n\n\nChapter 11\nEmbedded Operating System\n\n如果想知道一個 OS 簡單的組成, 這一章其實有些東西\n我因為看過 uC/OS II 這個 OS 的 source code, 所以這一章是跳著看\n我個人覺得, 移植一次 uC/OS II, 感覺會更踏實\n\n\n\nChapter 12\nCache\n\n講 Cache 原理的書很多, Computer Architecture/Organization 都有專門的章節\n這章不免俗的也講解了原理, 有以前的基礎, 看起來不會吃力\n\n這章最主要的價值是, ARM上面的 cache 怎麼配置, 這本書講得離應用更近\n包括那個該死的 CP15 要怎麼設定 :p\n\n我自己玩 ARM 的時候就感受過 cache 的威力, 開了以後, 速度快很多, 殺很大\n\n\n\nChapter 13\nMemory Protection Unit (MPU)\n\n寫程式最怕記憶體存取超過邊界, C 語言沒有提供記憶體邊界保護的功能\n有些 ARM 有提供硬體支援, 避免程式設計師做傻事\n\nMPU 的功能和下一章要講的 MMU 相比, 功能比較弱\n我還沒玩過 ARM 的 MPU, 這一章我是當作增廣見聞在看得\n\n\n\nChapter 14\nMemory Management Unit (MMU)\n\n不管是 computer organization/ architecture, OS, 都會講講 virtual memory\n歌頌一下他會提供多大的彈性, 有多好有多好\n\n但是實際上要怎麼用, 怎麼在彈性和效率之間取得平衡, TLB是什麼\n這些主題我認為, 挑一顆有 MMU 的處理器玩過一次, 鐵定一生難忘\n\n我自己玩 MMU 的時候, 也處在極痛苦的狀態\n怎麼把課本學到的, 和硬體連結起來, 這不是普通的麻煩\n\n一般工作時, 其實這些東西摸到的機會不多, 因為這些會有專門的 team 弄得好好的\n但是有自己玩過一次, 知道他的痛苦, 真的是很好的經驗\n\n\n\nChapter 15\nThe Future of the Architecture\n\n* DSP instructions\n* SIMD\n* Thumb-2\n\n\n\nAPPENDIX A\nARM and Thumb Assembler Instructions\n\n去書店買任何 ARM 的書, 幾乎都會講一講 ARM 指令集\n這個主題是如此的枯燥乏味, 但又如此的重要, 以至於每本書都要提一提\n\n這本書的附錄我沒看, 但是我在別本書看過\n我真的是一道一道指令看, 而且反覆看很多次, 查了又查\n了解組合語言, 是認識 CPU 能力的最好方式, 確實有看的價值\n\n我是寫 bootloader 時, 被逼著看別人寫的組語, 那時候學會的\n\n\n\nAPPENDIX B\nARM and Thumb Instruction Encodings\n\n指令的編碼... 機械碼的格式... 其實可以跳過 Orz\n\n\n\nAPPENDIX D\nInstruction Cycle Timings\n\n如果想寫出超威的assembly, 這一章會是好朋友\n但是這個機率通常... 滿低的 XD\n\n\n後記\n\n\n以前看書都是逐字逐句看, 這本書一開始也這麼讀\n只是後來實在受不了, 尤其是 DSP那段, 這本書真的適合當工具書用\n\n\n這本書足足 700 pages, 雖然沒看完裡每個字\n倒也從頭到尾走了一次, 也寫下自己的讀書心得, 自我感覺挺不錯的 XD\n\n\n最近的獵人漫畫, 畫了會長的練功過程\n一拳又一拳充滿感激的正拳, 累積了基本功夫\n最新一期(#291), 最後一個鏡頭會長說\n\n\"萬分感謝, 與你相會前, 我所經歷的一切\"\n\n謹以這個過程勉勵自己, 練功沒有捷徑\n要成為絕世高手, 沒別的辦法, 一點一點的繼續學下去吧\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:9,
				author:"lihgong",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344176738.A.864.html",
				postDate:"2012/8/5 22:25",
				pttcomments:7,
				name :"Expert C Programming: Deep C Secrets",
				type :"英文書",
				buytime:"2009",
				buyplace:"",
				link :"http://www.amazon.com/Expert-Programming-Peter-van-Linden/dp/0131774298",
				img :"http://ecx.images-amazon.com/images/I/41186C2QEZL._SL500_AA300_.jpg",
				howtoget :"Internet",
				why :"",
				think :" \n這本書看完最大的心得, 是可以了解C語言一些高階的特性\n很適合在學完C 以後讀這本書, 了解更多深入的主題\n    \n    -----\n\n同步刊載於\nhttp://lihgong.blogspot.tw/2009/09/expert-c-progranmming-deep-c-secrets.html\n\n\n[書評] Expert C Progranmming: Deep C Secrets\nChapter 1. C Through the Mists of Time\n\n這個章節分析 C 語言的歷史, 以及 C 的標準\nANSI C, ISO C, 還有當初在創造 C 語言時, 做了哪些選擇\n這章可以當故事書看, 我相信讀歷史有幫助瞭解事物背後的原因 :)\n\n作者建議可以讀讀 C standard, 我想還是算了 XD\n\n\n\nChapter 2. It's Not a Bug, It's a Language Feature\n\n用 switch 語法 \"一路跑到底\" 沒有自動 break 講起\nC 語言為了簡潔, 賦予關鍵字太多意義, 例如 static 在函數裡外的意義就不同\n另一個值得一提的是 C 的 operator, 有 *, [], (), ->, &&, ||, &, |, ==\n這一大堆拼湊在一起, 誰先誰後經常是 bug 的溫床\n\n這章也有 buffer overflow 的具體說明, 值得一看\n這也是 windows 系統漏洞的溫床之一\n\n\n\nChapter 3. Unscrambling Declarations in C\n\nC 語言裡有些定義很古怪, 比如定義指標\n\nint *a;\n\n為什麼不寫成\n\nint &a;\n\n意義還比較清楚, 答案在這一章有給出\n\n\"there is the C philosophy that the declaration of an object should\nlook like its use\"\n\n於是真相大白了, 原來是 C的設計哲學\n後來的 C++ 用了 & 代表 reference, 算是比較進步的作法吧\n\n另外 C 語言裡, 最恐怖的東西莫過於 function pointer 的定義...\n這是從 \"telnet\" 程式碼摘錄出來的 prototype:\n\nchar * const * (*next)();\n\n或是這個 UNIX 的 signal() 的 prototype:\n\nvoid (*signal(int sig, void (*func)(int)) ) (int);\n\n這是什麼鬼 !! 翻遍市面上所有講 C 的書, 恐怕少有能講清楚的了\n但是這本書做到了, 這一章值得一看, 看完保證對 C 有另一層看法\n\n另外這一章還針對 typedef, #define 的差異做了說明:\n\n#define INT_PTR int*\ntypedef int* int_ptr;\n\nINT_PTR a, b; -> int *a, b -> a is pointer, b is variable\nint_ptr a, b; -> a & b are pointer\n\n精闢啊 !!\n\n\nChapter 4. The Shocking Truth: C arrays and Pointers Are NOT the Same\n\n這章節在講 array 和 pointer 是不同的東西\n會有這樣的 issue, 來自於陣列的名稱, 本身可以當指標用\n但是理解了背後的實作以後, 自然不會搞混\n\n這一章不長, 但是我想到的是計算機組織 (微算機系統) 這門課\n課程裡, 再再舉了 C 語言的例子, 然後示範怎麼翻譯成組合語言\n如果學了 C, 再仔細思考這些程式片段, 對程式的功力是大有幫助的\n\n比如陣列的 address 通常會先放在一個 register 裡, 比如叫 $R1\n然後會再有個 register 放陣列的 offset, $R2吧\n取出的結果放在$R3\n\nldr $R3, $R1[$R2]\n\n這是存取陣列的基礎, C 存取陣列的語法, 其實跟 machine code 貼得很近\n另外是 struct 的語法, 要怎麼去存取每個 member 其實是 ldr 這類的指令\n只是這時候, offset 變成相對 struct 起點的 offset\n\n要深入瞭解 C 語言, 對組合語言有一定的認識是有必要的\n畢竟瞭解事物背後的原理, 才能掌握一切的規律\n\n\n\nChapter 5. Libraries, Linking, and Loading\n\n\n不知道有沒有人想過, printf() 的實作到底是在哪裡\n我先說答案, 絕對不是在 stdio.h 裡面 XD\n\n如果在 UNIX 上, 這個 library 會放在\n\n/lib/libc.so.6\n\n如果是 windows, 他會放在\n\nC:\\Program Files\\Microsoft Visual Studio 9.0\\VC\\lib\\msvcrt.lib\n\n或著微軟也有給了說明 http://support.microsoft.com/kb/94248\n總之, library就是一堆人家寫好的 function, 要用別人工作的結果\n必須把自己的程式和別人的相連, 具體的行為, 就是靠著 linker 來做\n\n\n----\n\n\n我很少有看書在提 linker 動作的細節, 包括 static link 以及 dynamic link\n以及這些 linker 會遇到的 inter-positioning 的問題\n作者建議至少要看看 linker 的輸出, 瞭解一下到底 linker 做了些什麼\n\n\nChapter 6. Poetry in Motion: Runtime Data Structures\n\n\n\n* a.out\n為什麼 UNIX 裡執行檔預設的名字是 a.out\n原來這代表的是 \"assembler output\", 不過其實他是 linker output\n真正的 a.out, 是 PDP-7 這台機器才有, 上面沒有 linker\n\n\n\n* Segments\n執行檔, 不管在 windows/ UNIX 都由多個 segments 構成\n所謂 data/ code/ bss/ data segments 是也\n了解執行檔的結構, 對了解 C 語言也有幫助, 比如宣告一個 global 陣列...\n\nint arr1[100];\n\n這個陣列會被放在 BSS segments, 不占執行檔空間, 程式載入時, 會被清成 0\n如果是這樣宣告...\n\nint arr2[3] = {1, 2, 3};\n\n那這個陣列會放在 DATA segments, 因為他有初始值, 會占執行檔空間\n\n\n\n* Stack/Heap, Typical memory mapping\n了解程式執行的記憶體是很重要的, 舉例來講, addreess 0 的地方通常不拿來用\n配上 MMU (virtual memory) 一起使用, 如果程式試圖存取這個地方發生 page fault\n就能揪出一些錯誤的指標存取\n\n另外 Stack 和 Heap 長的方向, 以及配置在記憶體的位置也很重要\n很多人都有經驗, 在 function 裡想開大陣列, 但是沒辦法開\n原因就是 function 裡的陣列是放在 stack 裡, 如果 stack 不夠大, 當然放不下\n\n有個解法是: 把這個陣列宣告成 global, 放在 BSS segment, 就可以解這個問題\n另一個解法是: 把 stack 宣告得更大\n\n在寫 Embedded System 程式時, 甚至整個 memory map 都要手動配置\n了解這些看似沒有用處的細節, 其實是成為高手的重要關鍵\n\n\n\n* What Happens When a Function Gets Called: The Procedure Activation Record\n要把 C 學得紮實, 一定要從組語的角度思考問題, Think in Assembly Level\n呼叫函數時, 變數是怎麼傳遞, 哪些東西被塞到 stack 裡\n這些是呼叫函數的開銷, 這些開銷和函數的本體相比, 決定用不用 inline 語法\n\n另外 Visual C++ 能在 debug 時看到 call trace , 看得到函數呼叫的流程\n這個章節說明確切的實作方法, 值得一看\n\n\n\n* setjmp/longjmp\n這個功能是 C 的高階功能, 他有一些特別的用途, 值得一看\n之後 C++ 的 try / cache 聽說是用類似的東西實作的\n\n\n\n\nChapter 7. Thanks for the Memory\n\n這一章在講記憶體的故事, 任何一個熱愛電腦的人\n都應該讀讀這一章, 看看 80x86 address mode 怎麼演變\n有很多小時候不清楚的事 (eg. 640KB 限制怎麼來的), 這兒都找得到答案\n\n懷古之後, Virtual Memory 的觀念登場了\n這本書沒提到 VM 應當怎麼實做, 想看精彩的 VM 說明, 白算盤可能適當些\n\n這章偏重觀念上的講解, 對 Memory Hierachy 不大懂得人可以看看\n但是最精彩的 Memory Hierachy, 我認為要從計算機組織出發\n這樣的觀點才是最完整的\n\n\n\nChapter 9. More About Arrays\nChapter 10. More About Pointers\n\nArray 和 Pointer 有相當多相似之處, 這章針對定義和使用方式再說明\n\nMulti-dimensional Arrays 實際在記憶體的排列方法也值得一看\n如何傳遞 multi-dimension 陣列到函數也很重要, 舉例來說\n\nint a[100][30][10];\n\n要怎麼傳遞給任意函數? 答案是下面的 prototype:\n\nfun(int a[][30][10])\n\n陣列最尾巴的 dimension 必須要指定, 最開始的不用\n如果你沒辦法回答為什麼會這樣, 那這兩章值得一讀, 這和陣列存取的方式有關系\n\n\nChapter 11. You Know C, So C++ is Easy\n\n這章以 C 的觀點, 介紹 C++ 的性質, 可以當作一篇簡單的 C++ tutorial\nC++ 是一個博大精深的語言, 要精通全部的 C++ 真的很困難, 而且沒必要\n我相信80/20法則在這裡依舊是用: 80% 的工作, 只用 20% 的工具完成\n\n\n----\n\n\nAppendix: Silicon Valley Programmer Interviews\n\n這篇附錄是整本書我最喜歡的章節之一, 這裡有真正的矽谷工程師面試實況\n讀起來趣味橫生, 又不失內容\n\n\n----\n\n這本書的心得到此為止, 讀過的人, 也歡迎來我的版貼上你的 note :)\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:10,
				author:"diabloevagto",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344177821.A.FDE.html",
				postDate:"2012/8/8 22:43",
				pttcomments:4,
				name :"深入淺出－設計模式",
				type :"翻譯書",
				buytime:"圖書館借閱",
				buyplace:"圖書館借閱",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010309237",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/7/0010309237.jpg&width=200&height=280&quality=80",
				howtoget :"圖書館借閱",
				why :"",
				think :" \n我想大家應該都聽過鼎鼎大名的gof，一開始沒接觸到DP無法體會到架構完整的好處\n\n常常在寫程式都是想到什麼就寫什麼，自從接觸到DP之後才發現到架構原來能這麼神奇\n\n有些DP非常容易體會，常常都發現自己就已經在用了\nex.adapter\n\n但有些DP真的很難體會到，經常看了半天還是參透不了其中的道理\n\n後來發現到這本深入淺出，利用很簡潔的例子，以及很有架構的撰寫方式\n\n講到後面的部份都會再次檢閱先前DP的缺點，並且改進的方式就是此章節所要講的DP\n\n其中的例子都很生動活潑，我想這就是head first的特色！\nps.這本書讓我愛上這個系列！\n\n想推薦給大家看看，看完之後會體會到DP的美妙之處\n\n讓我感覺之前寫的程式都是硬幹來的\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:11,
				author:"descent",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344181076.A.DA4.html",
				postDate:"2012/8/5 23:37",
				pttcomments:1,
				name :"Code: The Hidden Language of Computer Hardware and Software",
				type :"簡中翻譯書",
				buytime:"2011/12/12",
				buyplace:"台南若水堂",
				link :"http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?ie=UTF8&qid=1344180843&sr=8-1&keywords=Code%3A+The+Hidden+Language+of+Computer+Hardware+and",
				img :"http://d1b14unh5d6w7g.cloudfront.net/0735611319.01.S001.LXXXXXXX.jpg?Expires=1347879605&Signature=LLcplu4CL1qLWsE1BMzrIVmcVtndOKssydA7e+BYCh8IWmw+CzUClfD7Wc/Aicbwbe6I5IEFTrBzPWHHz5fYt61u65lEnTL8KeUIyFgacmMp+g/60i+yh2XdDZlyQbsPMTpEGnENX5xBco+2JoWVNStjn9Kpukt0+A1v1E/WZ18=&Key-Pair-Id=APKAIUO27P366FGALUMQ",
				howtoget :"購買",
				why :"這是很久很久之前不知道在哪裡聽說到的書, 因為作者 Charles Petzold (windows programming 界的大師級人物) 很有名, 我相信這會是一本好書。",
				think :" \n這本書的內容是什麼呢？從書名 CODE 來看, 又, 它是一本電腦相關書籍, 作者又是軟體\n界大師級人物, 也許有人會猜和程式語言相關, 教怎麼寫程式吧! 不過從簡體中文的翻譯\n可以看出, CODE 被翻成編碼的意思 ... 嗯！還是猜不到是吧？\n\n這本書是在講述計算機的故事, 從燈泡、開關到打造出一台計算機以及後來的軟體發展到\n網路的故事, 很意外吧！從書名完全看不出來是這樣的內容。\n\n在 iWoz 科技頑童沃茲尼克這本書中讀到, Steven Wozniak 從小被傳授電子學相關的知\n識, 其中包括原子核裡電子的流動與電流的關係, 我那時候心想: 「好厲害！原來電流可\n以細談到電子。」而在本書 CODE 中, 從第四章 - 手電筒的剖析, 我知道這是怎麼一回\n事了, 也許中學教育早已教過, 但我真的不記得了。\n\n作者從第一章的摩斯電碼開始, 告訴讀者編碼的概念, 如何簡化編碼還原到原來的意思,\n盲人使用的文字也是編碼的一種, 封面上每六個凸起或是平的圓點 (簡體中文版本才有)\n就是 C, O, D, E 本書書名。\n\n手電筒的線路到電子的流動完成整個電流的移動, 有趣而令人容易理解的比擬, 實在令人\n佩服。\n\n從人類十個手指頭的十進位 -> 卡通人物四個手指頭的八進位 -> 龍蝦螯的四進位 -> 海\n豚兩個鰭的二進位, 原來印度人發明的阿拉伯數字是如此的偉大, 有了它, 我們得以用同\n樣的原理計算八進位、四進位、二進位, 不過得先準備好其他進位的加法表和乘法表。一\n路的解釋下來, 讓我有豁然開朗的感覺, 頓悟了原來數字這回事。\n\n再來的邏輯學和燈泡完成了 and/or 運算, 真是神奇, 原來這些數學和計算機是這樣關聯\n起來的。快要提到燈泡、電池、開關、導線和計算機的關係, 真期待後面的內容。\n\n心得很長:\n完整版請到 blog:\nhttp://descent-incoming.blogspot.tw/2012/01/code-hidden-language-of-computer.html\nshort : http://goo.gl/56CNw\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:12,
				author:"godspeedlee",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344192608.A.060.html",
				postDate:"2012/8/6 02:50 ",
				pttcomments:2,
				name :"精通正則表達式",
				type :"簡體書",
				buytime:"2009",
				buyplace:"網拍",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010546974",
				img :"http://im2.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/4/0010546974.jpg&width=130&height=173",
				howtoget :"購買",
				why :"因為有愛",
				think :" 這本書我從頭到尾讀了2次以上，我想應該有點資格說說話\n\n沒讀之前，以為自己很懂Regex，讀了之後發現自己其實只懂Regex皮毛，\n這本書對Regex的原理、應用、限制、各個流派都講得非常清楚，雖然\n他是簡體書，但是他有索引喔！而且可以針對meta character查詢，\n非常方便！\n\n如果要知道這本書對小弟多有用，可以看看小弟網站上Regex那一項..\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:13,
				author:"diabloevagto",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344242008.A.E1D.html",
				postDate:"2012/8/6 16:33",
				pttcomments:4,
				name :"C++ 標準程式庫",
				type :"繁體書",
				buytime:"無",
				buyplace:"無",
				link :"http://www.tenlong.com.tw/items/986421117X?item_id=12592",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/12607/medium/986421117X.jpg",
				howtoget :"圖書館借閱",
				why :"學C++就是要研究STL!",
				think :"我想侯捷這位大師應該不陌生吧\n雖然是翻譯書，不過侯捷翻譯的書都滿有品質保證的。\n書中的內容滿完整的介紹了STL這個神兵，也用了滿多的CODE來介紹。\n滿適合當作學習用書一篇一篇仔細的研究，也很適合當作工具書，拿來查閱。\n我個人是看過一次之後對STL有個大概的了解，知道一下有什麼東西能用。\n之後就比較常當作工具書來查閱。\nSTL裡面有很多工具都很好用，如果有在寫C++的買來當作工具書絕不會後悔！\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:14,
				author:"ccpz",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344261647.A.2FB.html",
				postDate:"2012/8/6 22:00",
				pttcomments:2,
				name :"約耳趣談軟體：來自專案管理的現場實錄",
				type :"繁體書",
				buytime:"",
				buyplace:"",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010467041",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/1/0010467041.jpg&width=200&height=280&quality=80",
				howtoget :"借閱",
				why :"書名有趣 XD 談管理的書又有\"趣\" 這個字",
				think :"    這本是 Joel 他的 blog 文章摘錄\n版上應該很多人都看過了吧?\nblog連結: http://www.joelonsoftware.com/\n另外也有人在做翻譯: http://local.joelonsoftware.com/wiki/首頁\n\n內容主要是他在軟體界打滾的經驗\n包含之前在 MS, 之後創立 Fog Creek\n(因為出版時間較早, Stack Overflow 系列網站沒有包含)\n還有在業界聽到的各類八卦, 例如:\n\n你絕對不應該做的事: http://bit.ly/gycTBy\nNetscape 他們決定把程式從頭重寫過。\n血淋淋的說明其他書常提到的: 第二系統/重構失敗, 會有什麼下場\n\n另外還有很多建立團隊的經驗，如:\n\n軟體人員面試教戰守則 http://bit.ly/O1jAIL\n讓你的履歷有可讀性 http://bit.ly/MisS1O\n  像個有血有肉的人類，而不是一大串工作經歷或程式語言\n\n他的書櫃列表: http://bit.ly/OOwWV3 幾乎都是經典書\n\n還有很多雜七雜八的經驗談/吐槽/.....etc\n總之他的文筆很有趣 XD, 內容也很實用\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:65,
				author:"ccpz",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344261647.A.2FB.html",
				postDate:"2012/8/6 22:00",
				pttcomments:2,
				name :"約耳續談軟體：探究軟體經營的根本實學",
				type :"繁體書",
				buytime:"",
				buyplace:"",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010472662",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/2/0010472662.jpg&width=200&height=280&quality=80",
				howtoget :"借閱",
				why :"書名有趣 XD 談管理的書又有\"趣\" 這個字",
				think :"    這本是 Joel 他的 blog 文章摘錄\n版上應該很多人都看過了吧?\nblog連結: http://www.joelonsoftware.com/\n另外也有人在做翻譯: http://local.joelonsoftware.com/wiki/首頁\n\n內容主要是他在軟體界打滾的經驗\n包含之前在 MS, 之後創立 Fog Creek\n(因為出版時間較早, Stack Overflow 系列網站沒有包含)\n還有在業界聽到的各類八卦, 例如:\n\n你絕對不應該做的事: http://bit.ly/gycTBy\nNetscape 他們決定把程式從頭重寫過。\n血淋淋的說明其他書常提到的: 第二系統/重構失敗, 會有什麼下場\n\n另外還有很多建立團隊的經驗，如:\n\n軟體人員面試教戰守則 http://bit.ly/O1jAIL\n讓你的履歷有可讀性 http://bit.ly/MisS1O\n  像個有血有肉的人類，而不是一大串工作經歷或程式語言\n\n他的書櫃列表: http://bit.ly/OOwWV3 幾乎都是經典書\n\n還有很多雜七雜八的經驗談/吐槽/.....etc\n總之他的文筆很有趣 XD, 內容也很實用\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:15,
				author:"landlord",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344262814.A.7C1.html",
				postDate:"2012/8/6 22:20",
				pttcomments:6,
				name :"軟體構築美學 - 當專案團隊遇上失控程式，最真實的解決方案",
				type :"翻譯書",
				buytime:"2010",
				buyplace:"天瓏",
				link :"http://www.tenlong.com.tw/items/9866348784?item_id=58312",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/59461/medium/9789866348785.jpg",
				howtoget :"天瓏 x 2 (上個活動買了一本全新的送人，自己的那本已經寫滿筆記跟便條紙，捨不得送人) ",
				why :"Ruddy 老師推薦，自己翻閱後，覺得這就是我要的書，是引起我職涯轉捩點的一本書。",
				think :"        該書前半段是軟體工程的基礎建設，\n        後半段是軟體工程設計面的基本設計原則與方式。\n\n        整本書穿插著許多我們身處的現實世界的案例，\n        書裡的這些案例，從各種角度來建議如何淨化這些棕地系統，\n        也包含了人性、組織文化的部分\n\n        除了概念清楚透徹，貼近現實的案例，還有許多實際的設計方式。\n\n        至少看完不再覺得軟體工程是打高空或遙不可及。\n\n        用心跟著書上的內容去學習、努力、實踐與改變，\n        事實上也的確改變了我們團隊的工作環境與文化 (至少兩份工作皆是如此)\n\n        另外強調一下，這本繁體書也翻譯地超級到位，\n        超級通順，一點都不突兀，連棕地一詞都翻譯得很好。\n\n        也不用擔心書名或範例以.NET為例，因為概念、案例甚至範例，根本是通用的。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:16,
				author:"diabloevagto",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344263378.A.8DC.html",
				postDate:"2012/8/6 22:29 ",
				pttcomments:3,
				name :"人月神話",
				type :"繁體翻譯書",
				buytime:"",
				buyplace:"",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010254508",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/8/0010254508.jpg&width=200&height=280&quality=80",
				howtoget :"圖書館借閱",
				why :"太有名了！",
				think :"這本書著重的不是在於技術，而是偏重管理。\n\n邊看邊覺得講得實在太有道理了，幾乎我自己遇到的問題，在這本書內都有著墨\n\n有人說過\"提出問題不是厲害的，厲害的是提出解決的方法\"\n\n這本書驗證了這句話，作者利用自己的經驗來提出解決的方法，而不是單純理論派\n\n我認為，無論是PM、programmer，管理別人、管理自己，都需要有的一本書\n\n看完之後會發現，自己遇到的問題其實是有解的！\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:17,
				author:"diabloevagto",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344264061.A.91B.html",
				postDate:"2012/8/6 22:40",
				pttcomments:11,
				name :"程式設計師的自我修養：連結、載入、程式庫",
				type :"繁體書",
				buytime:"",
				buyplace:"",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010456858",
				img :"http://im2.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/8/0010456858.jpg&width=200&height=280&quality=80",
				howtoget :"圖書館借閱",
				why :"名字真的非常有趣，而且揭開了 compiler 這神秘的面紗",
				think :"簡單一個字\"難\"！這本書也在C_and_CPP版被推到爛了！\n\n這本書提到從cpp一直到exe檔中間所有的過程，實在是又難又有趣。\n\n在這之前一直以為這個過程也就只是一個compiler\n但看完之後才知道是好幾個步驟全部合在一起的\n也才知道一個g++ test.cpp是很深奧的步驟\n\n不過說真的，如果對於語言背後的原理興趣不大的，那我想這本書應該會看到睡著\n但如果喜歡研究語言背後的原理\nex.為什麼printf這樣簡單的一行就可以顯示出文字？\n   compiler跟Link到底又做了什麼事情？\n喜歡這些問題的人，看到這一本一定會相見恨晚！\n\n用了非常多的tool去驗證書本內說的spec，以及很多圖表來講解。\n絕對不會有好幾頁都是滿滿的字的情況發生。\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:18,
				author:"enthos",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344266397.A.44F.html",
				postDate:"2012/8/6 23:19",
				pttcomments:3,
				name :"Binary Hacks：黑客秘笈100選",
				type :"簡體書",
				buytime:"2011",
				buyplace:"三民書局",
				link :"http://www.sanmin.com.tw/page-product.asp?pf_id=99r155W9M101C7J100Z67o113Q122kOErFPw1105ZjQ",
				img :"http://img1.sanmin.com.tw/image/750838793.jpg",
				howtoget :"購買",
				why :"實用。",
				think :"翻譯質量很差，但是原本的內容很好。(原文日文)\n\n例:\n21.用 statifier 對動態鍵接的的可執行文件進行模擬靜態鍵接。\nhttp://statifier.sourceforge.net\n\n84.用 jockey 來記錄，再生 Linux 的程序運行。\nhttp://home.gna.org/jockey/\n\n86.用 livepatch 在運行中的進程上發布補丁。\nhttp://freecode.com/projects/livepatch\nhttp://www.cnblogs.com/WuCountry/archive/2010/02/22/1671537.html\n\n相關的:\nhttp://sourceforge.net/projects/pannus/\nhttp://www.landley.net/kdocs/ols/2008/ols2008v2-pages-245-254.pdf\n\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:19,
				author:"beatitude",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344274598.A.632.html",
				postDate:"2012/8/7 01:36",
				pttcomments:2,
				name :"駭客與畫家",
				type :"翻譯書",
				buytime:"2012/2",
				buyplace:"灰熊",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010324395",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/5/0010324395.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"看完 GEB 後上網搜尋 Lisp，結果亂找看到這本書",
				think :"這本是作者的散文集，前半部主題不一，從校園生活到垃圾郵件都有談到\n        ，後半部則著重在程式語言演化的範式上。\n\n        其中有很多有趣的觀點，包括作者認為語法 (syntax) 是負債而非資產，\n        很多語言擁有複雜的語法，但因此增加的語言效用或威力卻十分有限，造\n        成無謂的複雜度，而設計模式的出現更是這類語言威力貧弱的直接證據。\n        Lisp 則與此不同，homoiconic 的特性使 Lisp code 幾乎就等於詞法解析\n        樹，並因此得以實現強大的巨集，這點到目前為止仍是獨一無二的。\n\n        當時看完還滿震撼的。一方面 Lisp 的確與眾不同，另一方面是對作者對\n        於所謂的程式語言威力量表非常看重 (執念?)，這對於當時認為『語言只\n        是工具』的小弟造成很大的衝擊，價值觀多少受到了影響。\n\n        當然這並不表示我完全接受作者的結論，但是在寫一點 hello world 等\n        級的 Lisp 程式後，我真的有一種眼界大開的感覺。雖然目前 Lisp 普遍\n        被認為是一種不是很實用的語言 (太有彈性、可讀性太差)，但是\n\n        clojure，一種 modern Lisp，已經誕生了，祂沒有 Common Lisp 背負的\n        歷史包袱，在所有 JAVA 庫及 JVM 的加持下未來將與 Ruby 等動態語言\n        直接競爭，目前 Heroku 已經支援 clojure 編程了，這種強而有力的新\n        Lisp，未來實在讓人期待。\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:20,
				author:"godspeedlee",
				pttLink:"翻譯書",
				postDate:"2012/8/7 02:20",
				pttcomments:2,
				name :"jQuery實戰手冊第二版",
				type :"翻譯書",
				buytime:"2011",
				buyplace:"忘了",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010492941",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/1/0010492941.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工作需要",
				think :"去年在很不情願的情形下接下了web開發的工作，那時後端已經決定用php，\n前端看了一圈還是決定用jQuery，這本書把jQuery的精神跟觀念講得很清楚，\n如果有JavaScript的底子這本再看個1/3-1/2就可以上戰場了(配合\njQuery cookbook之類的一起服用)，這本聽說也是jQuery領域的名著?\n\n以下是服用後的效果:\nhttp://tinyurl.com/d9hghx9\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:21,
				author:"EmptySmile",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344316680.A.2A8.html",
				postDate:"2012/8/7 13:17",
				pttcomments:0,
				name :"設計的設計：一位電腦科學家的設計歷險",
				type :"繁體書",
				buytime:"2012/6",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010518492",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/2/0010518492.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"這本書是\"人月神話\"作者的新作品.",
				think :" 其實我還沒看完T..T\n                但是這本書著言在\"設計\",\n                怎樣設計最佳？\n\n                是限制, 是開放？\n                是緊  , 是鬆  ？\n\n                這本書用他的經驗, 歸類出\"如何\"設計\n                                         或\n                                        \"運用\"設計\n                會是最符合某種需求的人.\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:22,
				author:"LaPass",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344316788.A.66C.html",
				postDate:"2012/8/7 13:19 ",
				pttcomments:5,
				name :"SQL 語法範例辭典",
				type :"繁體書",
				buytime:"2011",
				buyplace:"書局",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010356474",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/4/0010356474.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工具書",
				think :" 這是本很好用的工具書\n                不適合剛開始學資料庫的初學者\n                但是對於已經學過資料的人來說\n                手邊有一本書可以查語法，很好用\n\n                SQL有個很討厭的地方是\n                不同類型的資料庫，語法會有些差異\n                但這本書有標明哪些語法適合哪些資料庫\n                在查的時候，也可以知道在哪種環境可以執行哪些語法\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:23,
				author:"LaPass",
				pttLink:"",
				postDate:"2012/8/7 13:29 ",
				pttcomments:0,
				name :"jQuery 網頁設計範例教學",
				type :"繁體書",
				buytime:"2011",
				buyplace:"書局",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010529471",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/1/0010529471.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工具書",
				think :" 如果已經對HTML、CSS、JavaScript有基本認識\n    想要快速上手一些JavaScript的絢麗特效的話\n    這本書很好用\n\n    當初買這本書後，大概翻過一兩次，就能了解jQuery的基本邏輯\n    再搭配jQuery官網上的Demo跟API\n    就可以應付大部份的狀況了\n\n    可買可不買\n    但如果不想背語法的話，手頭上有本類似的書會比較好\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:24,
				author:"LaPass",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344336938.A.F4F.html",
				postDate:"2012/8/7 18:55 ",
				pttcomments:2,
				name :"Google Android SDK 開發範例大全",
				type :"繁體書",
				buytime:"2011",
				buyplace:"書局",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010503986",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/6/0010503986.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工具書",
				think :"這本比較偏實用取向\n裡面就是一堆範例\n寫東西的時候可以很快的剪下貼上之類的\n如果有書上沒寫到功能，也可以從找到的相關物件去查\nandroid開發網站的API，很容易找到解決方法\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:25,
				author:"LaPass",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344337822.A.16C.html",
				postDate:"2012/8/7 19:10",
				pttcomments:0,
				name :"直達 Java 虛擬機器- JVM 進階與應用",
				type :"繁體書",
				buytime:"2012",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010529337",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/7/0010529337.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"當閒書打發時間",
				think :"挺有趣的書\n雖然不會有立即見效的幫助\n但是可以了解一些JVM的運作機制，跟JVM如何做佳化之類的\n如果哪天幫上忙的話，大概就是JVM狂跳ERROR的時候了吧\n\n大多數的狀況下，程式設計師不會去動到那一塊\n但了解底下是怎麼運作、自己寫出來的程式碼會被怎麼跑\n寫起程式會比較有感覺\n",
				worth :"No",
				suggest:"*****"
			},
			{
				seqNo:26,
				author:"zvn",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344342254.A.C57.html",
				postDate:"2012/8/7 20:24 ",
				pttcomments:0,
				name :"Object-Oriented JavaScript",
				type :"英文書",
				buytime:"2012/6",
				buyplace:"天曨",
				link :"http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141",
				img :"http://ecx.images-amazon.com/images/I/41BIxA3nsNL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg",
				howtoget :"購買",
				why :"當時在書局裡找 JavaScript 的書，我個人不太喜歡那種超厚，裡面一堆 sample code\n的書籍；感覺很多內容都可以跳過去，所以花了不少時間在找書；二方面也是希望\n以後有機會設計 Javascript framework 或者有機會需要做到類似 performance tuning \n的工作時，可以有一點基礎，寫出 scalability 比較好的 JavaScript code\n\n這本書很薄，厚度大概兩公分吧，但把 Javascript 從最基本的 data type, function，\n一路講到 OO 的 prototype、最後甚至一路飛到 Design pattern 去，很適合一些已經有\n基礎的人來看(沒基礎的話，畢竟例子比較少，看了沒感覺)\n\n若你想要用 JavaScript 設計一些 framework 的話，強烈建議可以看一下這本書\n\n買的話......看個人吧 我是敗了...\n",
				think :"呃.....其實上面回答得差不多了，我只覺得，光一個繼承就能有一堆 concern ，\n寫出十幾種方式來做 inheritance ，作者的功力和經驗真的很不錯\n而每章最後都會有重點整理(迷：所以重點是這個？)，把每一章節的重點再用極短的\n篇幅整理好，很適合看過的人做 recall ，我個人的習慣就是短時間內找到我需要的\n內容，不得不說，這本書真的很讚，完全打到我的 point  XD\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:27,
				author:"kui3",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344344829.A.1FE.html",
				postDate:"2012/8/7 21:07",
				pttcomments:0,
				name :"從需求到設計：如何設計出客戶想要的產品",
				type :"翻譯書",
				buytime:"2009",
				buyplace:"圖書館",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010365060",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/0/0010365060.jpg&width=200&height=280&quality=80",
				howtoget :"圖書館借閱",
				why :"找相關書籍推薦時看到就想看了",
				think :"從第一份工作開始寫程式以來,就一直在想我寫的程式能給別人帶來什麼\n\n工作這麼多年下來,遇過哪種開發人員就只是照客戶的要求去開發軟體\n\n而另外也有一種開發人員可以深入研究客戶真正需要的是什麼\n\n透過思考設計來讓自己的作品更完整更符合需求.這是從這系列的書籍學習到的\n\n不過感覺本書有些地方翻譯的不是很順..\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:28,
				author:"leicheong",
				pttLink:"",
				postDate:"2012/8/7 21:09",
				pttcomments:0,
				name :"Design for Hackers: Reverse Engineering Beauty",
				type :" 英文書",
				buytime:"",
				buyplace:"訂閱的網上書庫",
				link :"http://www.amazon.com/exec/obidos/ASIN/1119998956",
				img :"http://ecx.images-amazon.com/images/I/51SiSPTX2FL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg",
				howtoget :"網上書庫借閱",
				why :"偶然隨意瀏覽新書內容時發現的",
				think :"如果你是設計程式的人, 卻總是被別人批評對介面的設計沒概念.\n找了懂美工的人教又總是聽不懂, 這本書可能可以幫到你.\n\n我想這本書的話, 就算只看Introduction的部份也應該會有\n得著. 它清楚的告訴你為什麼即使大家都明白「良好設計」\n的重要, 大部份好的「電腦人」想學設計卻是如此困難.\n\n本書的內容部份將告訴你介面設計的基本準則, 還有不同\n設計元件的性質和意義, 以幫助你決定需要把那些特質套用\n到你的設計上.\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:29,
				author:"LaPass",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344345141.A.974.html",
				postDate:"2012/8/7 21:12 ",
				pttcomments:0,
				name :"Java SE6 技術手冊",
				type :"繁體書",
				buytime:"2011",
				buyplace:"書局",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010354594",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/4/0010354594.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工具書",
				think :"很適合初學者\n我開始學java的時候就是看這一本\n一些java的特性都用簡單易懂的方式寫出來\n可以迅速吸收\n\n以及，寫的比較有系統性\n花個十天看一看，就上手了 (之前學過C#，所以上手很快)\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:30,
				author:"LaPass",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344345801.A.0DC.html",
				postDate:"2012/8/7 21:23 ",
				pttcomments:4,
				name :"Thinking in JAVA",
				type :"翻譯書",
				buytime:"2011",
				buyplace:"書局",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010412750",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/0/0010412750.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工具書",
				think : "很詳細的解釋了JAVA語言\n以及會把一些同性質的物件的特性做比較\n\n作者假設讀者已經懂程式語言\n不會一步步慢慢教\n這本書不適合初學者\n但很適合已經學過程式的人去釐清一些細節\n以及搞懂在哪些狀況下該使用哪些物件之類的\n例如.... TreeMap 跟 HashMap的選用\nReetrantLock 跟 ReadWriteLock的選用等等\n\n以及.... 在遇到鬼打牆、寫程式一些狀況時可以拿起來翻一翻\n或許可以解決一些觀念上的問題\n",
				worth :"Yes",
				suggest:"******"
			},
			{
				seqNo:31,
				author:"fatsquare",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344349128.A.0EB.html",
				postDate:"2012/8/7 22:18 ",
				pttcomments:2,
				name :"SQL 案例解析",
				type :"繁體",
				buytime:"2011",
				buyplace:"網路",
				link :"http://shopping.pchome.com.tw/DJAA17-A48142715",
				img :"http://ec1img.pchome.com.tw/pic/v1/data/item/201104/D/J/A/A/1/7/DJAA17-A48142715000_4da2d78bd7038",
				howtoget :"購買",
				why :"工作需求(DB)",
				think :"還不錯，因為當時剛好都是碰這個兩個資料庫，可以看到別人\n怎麼下比較複雜的SQL或是為什麼會用這種方式下語法，\n個人覺得還蠻好的，可以讀讀。\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:32,
				author:"vity",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344356348.A.F4C.html",
				postDate:"2012/8/8 00:19 ",
				pttcomments:0,
				name :"Microsoft SQL Server 2008 Integration Services Problem-Design-Solution",
				type :"英文書",
				buytime:"2009",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=F011741321&",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/F01/1/1/1/F011741321.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"加強專業",
				think :"本書把寫資料庫程式會碰到的問題列出，\n然後一個一個說明有架構的解決方法，\n書中也有說明原理，並有實際程式跟資料庫，但還是比較適合已有基礎的人使用。\n\n摘要\n用SQL Server 2008 Integration Services處理資料，\n作者用現實世界的資料和程式講解，也清楚說明程式的架構。\n展現如何設計能把資料格式弄整齊，處理檔案的程式\n以及避免常犯的程式錯誤。\n\n目錄\nIntroduction.\n導讀囉，引起動機用的。如本書可以用在什麼地方\nChapter 1: SSIS Solution Architecture.\n介紹一下SSIS是什麼\n\nChapter 2: SSIS Management Framework Design.\n講的比較大方向，沒基礎的可能會不知道這在幹嘛。\n\nChapter 3: Package Deployment and Storage Decisions.\n這本書在這邊稍弱些，只有說明程式移到server前要注意什麼，\n但沒利用到功能來解決。\n\nChapter 4: File-Handling and Processing Methods.\n處理各種來源檔案的方法\n\nChapter 5: Data Extraction Best Practices.\n一些特殊的select方式\n\nChapter 6: Data-Cleansing Design.\n用各種功能把資料格式弄整齊\n\nChapter 7: Dimension Table ETL.\n集前3章的基礎，但其實本書可直接從這章下手，不懂的再往前翻\n開始講怎麼產生資料表的名目資料\n有分基礎級和進階級，進階級可選讀。\n\nChapter 8: Fact Table ETL.\n集4 5 6 7的基礎，算是本書可直接第二順序閱讀的章節\n講如何產生數值類資料\n同樣分基礎級和進階級，進階級可先跳過。\n\nChapter 9: SSAS Processing Architecture.\n開始講如何自動生成一張一張report，只篩選想要的資料並呈現它\n\n下面三章則為較進階的章節\nChapter 10: Implementing Scale-Out ETL Process.\n\nChapter 11: Scripting Design Patterns.\n\nChapter 12: SSIS Package Scaling.\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:33,
				author:"ccpz",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344388960.A.A95.html",
				postDate:"2012/8/8 09:22 ",
				pttcomments:3,
				name :"軟體測試之道：微軟測試團隊的成功經驗、方法與技術",
				type :"繁體",
				buytime:"",
				buyplace:"",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010465878",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/8/0010465878.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"",
				think :"內容主要是測試的理論, 以及他們在MS使用這些理論的經驗\n\n例如說 Pairwise Testing, 還有他們根據這理論寫的工具 QICT:\nhttp://msdn.microsoft.com/en-us/magazine/ee819137.aspx\n\n以及其他的複雜度分析, 模型分析, 還有自動化等\n\n只是有些地方可能太理論(還是翻譯的關係?), 看起來有點枯燥\n\n不過也是有有趣的地方, 像是他們測 windows USB 功能時\n用一台推車以 USB Hub 串超過100個USB設備\n然後沒事就插一下看看有沒有問題 XD\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:34,
				author:"rongkuo",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344389745.A.6A9.html",
				postDate:"2012/8/8 09:35 ",
				pttcomments:1,
				name :"Expert Oracle Database Architecture: Oracle Database 9i, 10g, and 11g Techniques and Solutions",
				type :"英文書",
				buytime:"2011",
				buyplace:"網拍",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=F012034237",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/F01/2/4/7/F012034237.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工作上需要ORACLE資料庫相關知識，看論壇推薦。",
				think :"本書作者為Thomas Kyte，他是一位ORACLE資料庫大師，在這領域的人叫他Tom，在這領域\n他一共寫三本經典的書，分別為\n1.Expert Oracle Database Architecture: Oracle Database 9i, 10g, and 11g\n  Programming Techniques and Solutions\n2.Expert One-on-One Oracle\n3.Effective Oracle by Design\n我目前手上有第1及2本，看完這兩本書後，我蠻敬佩Tom。另外他經營一個網站\nasktom.oracle.com，如果有關ORACLE資料庫任何問題都可提問，他也會回答。\n我覺得電腦技術要學得深一點，務必要學好英文，尤其在ORACLE資料庫這領域，\n光Oracle Database Documentation Library 文件一堆(全英文)，必須把基本觀\n念學好，遇到問題知道要在哪一本文件可以找到解決方法，若還無法解決問題，\n最後上asktom.oracle.com網站問Tom。\n    \n本書另有大陸翻譯的簡體書，若有需要，需注意ORACLE資料庫版本(有舊版9i&10g)，\n以及大陸翻譯IT術語跟台灣的差異。Thomas Kyte寫的書相當推薦\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:35,
				author:"godspeedlee",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344407983.A.7A2.html",
				postDate:"2012/8/8 14:39 ",
				pttcomments:2,
				name :"PLC 可程式控制順序電路",
				type :"翻譯書",
				buytime:"2007~2008",
				buyplace:"重慶南路",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010345437",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/7/0010345437.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"興趣+工作需要",
				think :"學生時代我幾乎選了所有跟寫程式有關的課程，其中有一項就是PLC，\n不過也是我唯一補考才過的課程，原因是這種程式的執行方式與一般\n程式語言不同，要用時序的方式來思考，可能跟小弟數位邏輯學的不怎樣\n也有關係吧？反正就是覺得不太容易上手\n\n後來因為進入工控產業，老闆請了職訓局老師來給大家上PLC(於是我又\n學第二次，這次學OMRON)，這時候才對PLC有比較清楚的了解，但是市面上\n的書還是很@#$%@$%...\n\n後來逛書店看到這本驚為天人，因為他的解說方式實在比國內自己寫的書\n清楚易懂多了，沒有一次講太多指令，薄薄一本很容易消化吸收，看完這本\n再去K那些一大堆指令的書就不會那麼痛苦了\n\n希望這不算岔題太遠XD\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:36,
				author:"hibrain",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344433279.A.F5C.html",
				postDate:"2012/8/8 21:41 ",
				pttcomments:4,
				name :"Visual C#2010 程式設計實例演練與系統開發",
				type :"繁體書",
				buytime:"2011/6",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010502751",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/1/0010502751.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"學習c#",
				think :"由淺入深的學習目標 不論是對初學者 或 很有經驗的開發者都很有幫助\n書內有非常多的常用的範例，看完這本書 不但能學好C#的基礎語法\n還有許多.net framework 4新增的功能介紹\n這本書絕對是非常值得推薦\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:37,
				author:"abcde1234",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344564321.A.888.html",
				postDate:"2012/8/10 10:05",
				pttcomments:7,
				name :"深度探索 C++ 物件模型",
				type :"翻譯書",
				buytime:"2012",
				buyplace:"圖書館",
				link :"http://tulips.ntu.edu.tw:1081/search/i?9789575663179",
				img :"http://jjhou.boolan.com/lippman.jpg",
				howtoget :"圖書館借閱",
				why :"看到Lippman就先借來讀讀，沒想到驚為天人。",
				think :"\n在C++ 11都已經成為正式標準的年代，這本1998才譯出的書已稍嫌過時。\n\n當我看到書的時候也沒有想到這本書內容是什麼，還想說是不是Lippman\n對OOP的見解呢XD 原PO只是個理科出身的新鮮人，看這本書實在是醍醐灌頂。\n但還是自覺自己好像不夠資格來推薦這本書，獻醜了(漸愧\n\n除了會把以前大一計程聽都聽不懂的virtual table和virtual pointer\n講的很清楚，看完後發現也沒這麼難之外，這本書會講到很多平常不會想到\n的概念，像是一個物件的成本在run time影響有多大，系統如何支援多型，\n在client端之外Compiler對多重繼承和虛擬繼承的難點在哪。另外他本身也\n做了很多實測印證他的說法。\n\n實務上可能用處不大，但是如果想對Object Hierarchy了解更多，這本\n是一個很好的選擇。\n\n侯捷老師把很多筆誤在中譯本修掉了，閱讀起來應該不會有太多Syntax\n上的障礙。\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:38,
				author:"abcde1234",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344581535.A.760.html",
				postDate:"2012/8/10 14:52",
				pttcomments:0,
				name :"User Interface Design For Programmers",
				type :"英文書",
				buytime:"",
				buyplace:"網路",
				link :"http://www.tenlong.com.tw/items/1893115941?item_id=192859",
				img :"http://ecx.images-amazon.com/images/I/41AeNwwfk1L.jpg",
				howtoget :"網路",
				why :"想些微地追上我們強大的 UI team 一點。",
				think :"恰好勉強達到本活動看了半本的threshold，因為作者只放了半本 XD\n\n原文的單字量很多，閱讀起來有些吃力。\n概念很明確，讀了之後大致會挺認同他的(至少比起Joel on Software)\n，會讓自己在設計GUI時會比較沒有疑惑。除了相容性這個議題外，我覺得還\n蠻像Apple的GUI設計理念。薄薄一本小書可以一看，中譯的不會花很多時間。\n\n",
				worth :"No",
				suggest:"****"
			},
			{
				seqNo:39,
				author:"godspeedlee",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344587896.A.AF3.html",
				postDate:"2012/8/10 16:38",
				pttcomments:7,
				name :"Hacker's Delight",
				type :"英文書",
				buytime:"2008 ~ 2009",
				buyplace:"天瓏",
				link :"http://www.hackersdelight.org/",
				img :"http://ecx.images-amazon.com/images/I/4112ZzVXY5L._SL500_AA300_.jpg",
				howtoget :"購買",
				why :"因為愛",
				think :"如果有什麼書讓你拿到了會覺得像拿到了一本「秘笈」，那這本書就是了。\n這本書讓你見識到前人如何在資源缺乏的情形下壓榨出系統的效能，位元\n運算可以玩到什麼程度，比方說計算一個 double word 裡面有幾個bit = 1，\n一般人可能要跑32次迴圈，但是其實幾條指令就可以做出來\n\n如果您還在8bit MCU上打滾的話，這本書幫助應該相當大，因為有些MCU\n居然只有512個指令空間可以用(搞不好更少的都有)，搞不好有時你就卡在\n剩幾個指令就可以做完結果空間被你用光了，這本書就可以派上用場了。\n\n以前寫過一篇算是跟這有關的嘴砲文\nhttp://godspeedlee.myweb.hinet.net/trick.html\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:40,
				author:"changyuheng",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344625361.A.21B.html",
				postDate:"2012/8/11 03:02 ",
				pttcomments:11,
				name :"Head First Java, 2nd Edition",
				type :"英文書",
				buytime:"2011",
				buyplace:"天瓏",
				link :"http://shop.oreilly.com/product/9780596009205.do",
				img :"http://akamaicovers.oreilly.com/images/9780596009205/lrg.jpg",
				howtoget :"購買",
				why :"工作需要 (Android framework 以上)",
				think :"以下是本書介紹：\n天瓏老闆說這本是 Java 聖經。\n到底是不是我不清楚，但這的確是一本好書。\n\n這本書是針對 Java 與物件導向初學者設計的，內容淺顯易懂，\n有自己交理工科大一必修程式語言作業的程度就可以閱讀，\n更具體一點就是，知道型別，會用條件判斷、迴圈、呼叫函式等即符合標準。\n\n本書最後幾章才介紹到 UI、Generics 等，不包含更深入的知識與應用，\n但對於基礎的介紹非常扎實。\n\nHead first 系列的中文譯名都以「深入淺出」開頭，\n因此書中譯本名為深入淺出 Java 程式設計。\n此系列標榜的是結合豐富的圖示與活潑的表達方式，\n使得讀者印象更深、更易吸收。\n效果反應兩極，從未讀過此系列的讀者，建議購買前先翻閱過。\n\n以下是我的感想，特別概括個人讀此書的過程，希望對後輩能有一些鼓勵的效果：\n（因為這本書像我這麼弱的人都能讀了，更何況是各位看官 XD）\n兩年前我靠著自己亂寫的遊戲小工具 War3Customkey ( http://ppt.cc/XGU3 )\n和超級嘴砲進公司，非科班出身的我，\n對計算機科學的瞭解大概是資工大一生的程度。\n面試時雖然號稱會 C，但後來馬上被發現連 MSDN 都不會查。\n\n兩個月後，總算是一償宿願，\n會用 Visual C++ 寫一些作業等級的小程式和一些 debug 技巧。\n\n試用期結束，緊接著開始寫 Android application 見真章。\n本來我抱著物件導向既然是被設計來讓設計程式更容易的架構，\n那應該不會比指標難搞，邊看 code 邊學應該就 ok 了。\n由於不知道繼承關係，只能靠 grep trace，\n再加上不知什麼原理就是會跑到的 call back method (listener)\n數週後夜郎自大的我，終於不下去。\n\n衝著喜歡英文，某天下班就到天瓏買了這本書回家啃，\n整本看完大概花了一個月。\n\n看完書之後，得到了一個很有用的心得：\n知道原理再去看現象，是知識的印證，更加深印象和體會，\n不明究理就埋首果象，是鑽牛角尖。\n如果還妄想藉 source code 建構知識，這難度不只是 try&error，\n應該是逆向工程或是瞎子摸象等級的。\n\n當具備了背景知識以後，\nPython 靠官方的 documentation 就能上手，\nC++ Language Tutorial ( http://www.cplusplus.com/doc/tutorial/ )\n三個小時可以翻完。\n\n同樣的體會，在我先是搞不清楚 process 和 thread 有何不同，\n到唸了作業系統之後，又再被印證一次。\n\n所以各位，唸書才是打基礎的捷徑。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:41,
				author:"chrischen",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344675897.A.28F.html",
				postDate:"2012/8/11 17:04",
				pttcomments:2,
				name :"如何設計好網站 Don't make me think",
				type :"翻譯書",
				buytime:"2008 ~ 2009",
				buyplace:"天瓏",
				link :"http://www.tenlong.com.tw/items/9867199499?item_id=29307",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/29566/original/9867199499.jpg",
				howtoget :"購買",
				why :"那時候剛入行一兩年，發現寫出來的UI常常讓user困惑\n (有時候自己也不滿意)所以想改善",
				think : "這本書圖很多，而且很薄\n以閱讀時間成本來看，算是C/P值超高的一本\n而且裡面講的概念很簡單，容易理解，在實務上也很有用\n雖然是寫網站設計，但是裡面的概念可以通用大部分的UI\n十分推薦程式中/新手要看這本\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:42,
				author:"ericwang1017",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344766296.A.07F.html",
				postDate:"2012/8/12 18:11 ",
				pttcomments:15,
				name :"Modern C++ Design 繁體中文版",
				type :"翻譯書",
				buytime:"2008年",
				buyplace:"天瓏",
				link :"http://jjhou.boolan.com/jjtbooks-modern-cpp-design.htm",
				img :"http://jjhou.boolan.com/mcd-c.jpg",
				howtoget :"圖書館看完後，買來收藏",
				why :"因為好書",
				think :"何為前衛, 本書所使用c++的技巧絕對會讓你\"瞠目結舌\"\n\n就像侯捷說的\n本書涉足無人履踏之境\n不但將 C++ templates 和 generics programming技術做了史無前例的推進\n又與 design patterns達成巧妙的結合\n\n就連他寫過STL源碼書也對此書甘拜下風\n\n作者使用c++實做一個 design pattern 的 framework\n怎樣設計, 怎樣思考絕對有一看的價值\n\n另外, 本書的前4章免費下載閱讀, 難道還不看嗎\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:43,
				author:"Lattewang",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344772089.A.68B.html",
				postDate:"2012/8/12 19:48 ",
				pttcomments:0,
				name :"新觀念 ASP.NET 3.5 網頁程式設計",
				type :"繁體書",
				buytime:"2009",
				buyplace:"台南誠品",
				link :"http://www.eslite.com/product.aspx?pgid=1001113881800840",
				img :"http://www.eslite.com/product.aspx?pgid=1001113881800840#",
				howtoget :"購買",
				why :"工具書",
				think :"這本書是滿基本的一本入門書，但書的內容卻十分充實，內容除了\n介紹ASP.NET內的基本元件外，還介紹ASP.NET跟SQL的關係，並稍微\n介紹了ASP.NET在AJAX上的應用，個人覺得這本適合給要入門的朋友們\n翻閱的一本好書\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:44,
				author:"ericwang1017",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344777461.A.69A.html",
				postDate:"2012/8/12 21:17 ",
				pttcomments:1,
				name :"PROGRAMMING PEARLS-S/E",
				type :"翻譯書",
				buytime:"",
				buyplace:"",
				link :"http://www.kingstone.com.tw/book/book_page.asp?kmcode=2014712314131",
				img :"http://img.kingstone.com.tw/Book/images/Product/20147/2014712314131/2014712314131b.jpg",
				howtoget :"圖書館借閱",
				why :"好書不買嗎",
				think :"Programming pearls 好像沒有中文書名\n\n不過該書其實每一章節都像是 programming 中的一顆顆的\"珍珠\"\n最後的章節, 則是教你把珍珠都串起來, 變成珍珠項鍊\n\n其中 CH7 的估算(The back of the Envelope)更是每個人應該要學會的東西\n對生活也很有幫助, 很多讀者建議父母可以這樣教小孩\n\n而一些章節主要在探討演算法\n例如 Kadane`s Algrithm 及 devide & conquer的技巧\n\n這本書你不會找到教你怎樣寫漂亮的程式\n但是會找到怎樣破解問題的方法\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:45,
				author:"ericwang1017",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344779351.A.477.html",
				postDate:"2012/8/12 21:49 ",
				pttcomments:8,
				name :"松本行弘的程式世界",
				type :"翻譯書",
				buytime:"2011",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010476366",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/6/0010476366.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"好書",
				think :"如果我前面推薦的兩本書是很深的書的話\n那這本書算是很廣的書\n\n本書跟我推薦上兩本書主要精神並無兩樣\n一樣是看作者怎樣\"設計\"一種東西, 學習他的思考模式\n\n本書看似在介紹ruby, 倒不如說是解釋\"ruby為什麼會長成這個樣子\"\n\nmatz(松本的代號) 觀察過N種不同的 language , 如lisp, erlang...等\n並探討各種語言的優缺點, 再把各種語言的優缺點, 實做在ruby中\n\n基本上我覺得近代比較熱門的高科技都在本書有介紹\n例如\n\n為什麼\nruby 採用 duck type ,以及ruby 為何選dynamic type的原因\n     (現今主流是static/strong type)\nruby 怎樣看待多重繼承及實做(mix-in)\nruby 怎樣做 meta programming(讓程式自己寫程式)\nruby 的閉包( closure )\nruby 中的 design pattern 及 MVC\nruby 的 monkey patch\nruby 的 functional programming(google及電信公司等常使用的技術)\n\n等, 看完你就會知道, 為何ruby 可以那麼紅 ...\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:46,
				author:"uranusjr",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344840875.A.172.html",
				postDate:"2012/8/13 14:54 ",
				pttcomments:2,
				name :"Peopleware： 腦力密集產業的人才管理之道",
				type :"翻譯書",
				buytime:"2012/07",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/booksfile.php?item=0010387385",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/001/5/0010387385.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"看 Joel Spolsky 和 Jeff Atwood 的 blogs 都強推\n號稱軟體管理二大聖經之一\n之前看人月神話（另一本神書）的時候作者也在內容中推薦\n",
				think :"博客來的內容簡介上就說得很清楚了, 跟內容很符合\n這本書的內容很輕鬆, 不是教科書的形式\n在理論上可能會讓人覺得有點鬆散, 不過軟體工作者看了會覺得心有戚戚焉\n軟體工作者在傳統上常常被類比到傳統製造業的工程師\n可是作者認為這是天大的錯誤, 軟體工作是創造性的行為, 更接近藝術工作\n但是在需要管理的專案中, 又是協同工作, 這和多數藝術創作不同\n加上其高科技本質, 必須以完全不同的嶄新方式管理\n書裡面舉了非常多兩位作者（身為顧問）實際遇到的公司問題\n並提出他們使用過的, 被證明過有效的方式, 以及被證明有害的方式\n告訴你應該, 以及不應該如何管理一個軟體專案\n\n另外我個人覺得這本書不只是對管理人有用\n裡面常常提到的一點是, 很多軟體工作者自己也不知道自己要什麼\n我想看完這本書後, 從事軟體工作的人員也能獲益良多\n因為知道自己（與周圍環境）的問題出在哪裡\n才能正確認知自己的價值和弱點, 進而有效改進自己的能力\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:47,
				author:"Knuth",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344862711.A.861.html",
				postDate:"2012/8/13 20:58",
				pttcomments:6,
				name :"word 6.0 的使用藝術",
				type :"繁體書",
				buytime:"應該有15年了吧？不可考",
				buyplace:"不可考",
				link :"http://findbook.tw/book/9789579964012/basic",
				img :"http://www.2books.com.tw/2hbs/8images/2books2007081102877.jpg",
				howtoget :"購買",
				why :"這是一本很特別的電腦工具書，妳拿在手裡翻了翻就會感受到她的特別。\n（當時的看法是這樣，我相信20年後的今天依舊）",
				think :"其實以IT類的書籍來說，這本書是給小學生看的初級入門電腦書。\n\n作者是鼎鼎大名曾經與其他有名的前輩一同創立資訊人的薛曉嵐，也因為女性且\n非技術背景出身的特質，這本書雖然就像坊間一般的電腦書，但卻多了份柔性。\n整本書用寫情書的情境作為範例，引導讀者一步步學習WORD的用法，薛小姐流暢\n俐落的文筆，使得整本書讀起來反而不像記憶中電腦書應該有的那股陽剛之氣。\n\n[那天，奇蹟似的，我竟坐上了一班加裝冷氣的平快車，挑個靠窗的位置，趕忙\n 從書包裡拿出新買的Janis Joplin，..........火車喀啦啦地走著，窗外的好\n 天氣讓我無法專注在唱片的解說上，瞇著雙眼，望向一排排的公寓，(裡面的人\n 都在做甚麼呢?)，我想。\n Janis Joplin用盡最後一絲的氣息，就是要唱出真心。她死去的20年後還有個\n 素未謀面的東方女孩，認真用心地聽他所留下來的聲音，人的一生，這樣就值\n 得了。那天，我做了一個重要的決定。\n\n        豹死要留皮。\n\n那是我開始寫這本書的第59天。]\n\n[一直記得剛開始寫書時，賴明宗(還是賀元?)說的一句話: 我不懂電腦，但我不\n 是白癡。 這本書，是我留下來的第一層皮]\n\n從情書展開序幕，藉由情書的寫作，學習如何輸入文字，修改，文字變化...到\n列印出來。\n\n例如replace的章節，就是教你怎麼寫好一封情書之後，把裡面的人名通通用取\n代的功能，把\"心怡\"換成\"阿珠\"。\n\n我必須說，時至今日，尚未找到第二個這樣風格的電腦書籍，因此推薦給大家。\n",
				worth :"No",
				suggest:"**"
			},
			{
				seqNo:48,
				author:"descent",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344905861.A.8B6.html",
				postDate:"2012/8/14 08:57 ",
				pttcomments:1,
				name :"我的電腦探索",
				type :"繁體書",
				buytime:"N年前",
				buyplace:"別難為我了 xD",
				link :"http://descent-incoming.blogspot.tw/2012/03/blog-post_14.html",
				img :"https://lh6.googleusercontent.com/-2IN4igCkqGw/T1_4gpEsdzI/AAAAAAAAZng/QjeSl4NDEGI/s640/IMGP7571.JPG",
				howtoget :"購買",
				why :"想看看這些名人的故事",
				think :"這兩本書是因為絕版了所以珍貴, 還是因為書籍的內容而珍貴？我已經無法判斷, 但書中\n的內容在電腦書出版業裡應該算是很稀有。我認為這應該是最容易出版的電腦書籍, 寫寫\n某些有名氣的軟體開發人員的故事, 學習過程, 不過沒想到這樣的書籍卻意外的少。\n\n兩本提到的軟體程式員有些重複：大概有劉燈、施威銘、侯捷、賴明宗、葉秉哲、黃志賢\n、唐宗漢, 我聽過部份人物, 所以想知道他們的學習故事。\n\n每個人用一小篇幅來介紹, 很容易看的小書, 一次看一個人的故事, 輕鬆舒適的閱讀下去\n, 也許你也會發現大家的學習之路是那麼的相似, 而有些共鳴。「原來他們也看這些書阿\n!」 「阿！還有這本書可以看, 我也要去買。」也許能勾起你學習道路上的回憶。\n\n資訊人出版社真的很可惜, 以出版高品質的電腦書籍為目標, 也的確有不少的好書, 不過\n卻因為不明原因而消失, 真是可惜。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:66,
				author:"descent",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1344905861.A.8B6.html",
				postDate:"2012/8/14 08:57 ",
				pttcomments:1,
				name :"資訊遊俠列傳",
				type :"繁體書",
				buytime:"N年前",
				buyplace:"別難為我了 xD",
				link :"http://descent-incoming.blogspot.tw/2012/03/blog-post_14.html",
				img :"https://lh6.googleusercontent.com/-ZXY1bYBIlwI/T1_4hYBxHpI/AAAAAAAAZno/sztItDLiUbs/s640/IMGP7572.JPG",
				howtoget :"購買",
				why :"想看看這些名人的故事",
				think :"這兩本書是因為絕版了所以珍貴, 還是因為書籍的內容而珍貴？我已經無法判斷, 但書中\n的內容在電腦書出版業裡應該算是很稀有。我認為這應該是最容易出版的電腦書籍, 寫寫\n某些有名氣的軟體開發人員的故事, 學習過程, 不過沒想到這樣的書籍卻意外的少。\n\n兩本提到的軟體程式員有些重複：大概有劉燈、施威銘、侯捷、賴明宗、葉秉哲、黃志賢\n、唐宗漢, 我聽過部份人物, 所以想知道他們的學習故事。\n\n每個人用一小篇幅來介紹, 很容易看的小書, 一次看一個人的故事, 輕鬆舒適的閱讀下去\n, 也許你也會發現大家的學習之路是那麼的相似, 而有些共鳴。「原來他們也看這些書阿\n!」 「阿！還有這本書可以看, 我也要去買。」也許能勾起你學習道路上的回憶。\n\n資訊人出版社真的很可惜, 以出版高品質的電腦書籍為目標, 也的確有不少的好書, 不過\n卻因為不明原因而消失, 真是可惜。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:49,
				author:"Zennstrom",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345066810.A.B8A.html",
				postDate:"2012/8/16 05:40 ",
				pttcomments:2,
				name :"Effective Java: Programming",
				type :"英文書",
				buytime:"2011/4",
				buyplace:"Amazon",
				link :"http://www.amazon.com/Effective-Java-Programming-Language-Series/dp/0201310058",
				img :"http://ecx.images-amazon.com/images/I/51FKSNAV2GL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg",
				howtoget :"購買",
				why :"準備工作面試",
				think :"在下因為是轉領域, 所以其實學JAVA只有在碩士學位的短短一年.\n\n個人覺得這本書對於剛熟悉JAVA的新人有很大的幫助, 一開始讀會覺得有點痛苦, 但隨著\n工作或是coding經驗慢慢變多了以後就會喜歡上這本書.\n\n裡面會在不同的章節提到很多寫code該注意到的地方, 例如變數能見度的問題, 以及OO該\n怎樣用, 如何避免一些效率上的問題, 一些常見的DESIGN PATTERN, EXCEPTION處理, 以及\nconcurrency的問題.\n\n對於沒有太多coding經驗的我來說, 這真的是一本很精闢的書, 畢竟很多應該也都是經驗\n的累積出來的best practice.\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:50,
				author:"hl4",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345136853.A.8EA.html",
				postDate:"2012/8/17 01:07 ",
				pttcomments:0,
				name :"The Pragmatic Programmer: From Journeyman to Master",
				type :"英文書",
				buytime:"2012",
				buyplace:"圖書館借閱",
				link :"http://www.tenlong.com.tw/items/020161622X?item_id=19633",
				img :"http://ecx.images-amazon.com/images/I/41HXiIojloL.jpg",
				howtoget :"圖書館借閱",
				why :"Stackoverflow 票選出來的書單裡面找的\n\n排名前面又不會太厚，剛好最近對增進程式碼品質有關的書籍有興趣",
				think :"前一陣子開始對增進程式碼品質有些興趣，網路上也找了一些文章來唸過\n\n但是還是有很多重要的觀念只是聽過，完全不知道其間的相關性和重要性\n\n以測試驅動開發來說，這本書就提到了這種程式方式可以讓你改進程式架構\n\n也可以讓將來的除錯變得容易，也提到了不能等到程式已經開發到一定程度了\n\n才開始寫測試，這樣是徒增麻煩而沒有助益等等\n\n我只是一個還沒離開學校的生嫩小朋友，在閱讀這本書的時候發現有些曾經\n\n嘗試過的方式在這本書中也有提到，不過這本書以更加純熟的方式詮釋讓我產生共鳴\n\n我相信這本書仍有很多地方也是同樣精彩，只是我還沒有足夠的經驗和知識體會\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:51,
				author:"descent",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345163697.A.F1D.html",
				postDate:"2012/8/17 08:34",
				pttcomments:9,
				name :"Orange's 一個作業系統的實現",
				type :"繁體書",
				buytime:"2010/09/16",
				buyplace:"博客來",
				link :"http://www.tenlong.com.tw/items/9867309537?item_id=56264",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/57163/medium/9789867309532.jpg",
				howtoget :"購買",
				why :"書中知識對於工作上來說可能沒有立即的助益, 我會花時間研究完全只是為了想「知道」 從電腦一開機就執行的 os 程式是什麼樣子。",
				think :"\n這書上有好多我的筆記, 不過大多不是心得, 而是我得把他的句子稍做改寫, 要不然讀來實在不愉快。\n\n明明組合語言對岸是稱為匯編, 真不知道為什麼繁體中文版本變成編譯, 偏偏這又會讓人誤會是要編譯 C 語言的那個意思, 這可讓我手動改了不少次。\n\n還有使用者/被使用者這兩個詞, 我看了很久之後才知道這是指 caller/callee, 台灣應該是翻譯成呼叫者/被呼叫者, 讓我在權限 stack 切換那邊卡了很久。\n\n\"訪問\"以台灣術語來說是\"存取\"的意思。例如'訪問'記憶體指的'存取'記憶體,\n花了我好多時間才搞懂 ... 按!!\n\n想不到第一版原來就很糟糕, 第一版第六章標題名為進程, 台灣應該是用行程, 但重點是整章充斥著處理這東西, 應該是指處理程序的意思, 我大膽猜測, 這位將簡體中文轉為繁體中文的編輯並不懂他現在在編輯的書籍是難得的中文大作, 本書被他做成這個樣子, 要是有一天他突然懂 OS 了, 應該會很後悔自己把這本書搞砸了。\n\n以同樣製作中國出版社的電腦書籍來說, 碁峰的程式設計師的自我修養：連結、載入、程式庫就製作的很棒, 描述語句、翻譯辭彙在在令人讀來輕鬆愉快, 沒有奇怪的辭彙、惱人的中國技術術語。\n\n書中第三章的保護模式介紹我非常喜愛, 在 dos 環境下可以一個功能慢慢測試, 從進入保護模式、權限切換、ldt 的使用、分頁表 ... 得把這些程式都看懂, 執行過一遍, 那才能稱上了解了 x86 保護模式。不過我看得異常辛苦, 這章的知識實在是太硬, 我已經挑戰好幾次。總算有點懂了。\n\n我遇到的一開始困難點是組合語言, 我不算是會組合語言, 第三章有關組合語言的程式碼實在讓我大吃苦頭, 但在努力學習之下, 我還是不會組合語言 ... 冏。\n\n不過那沒關係, 只要學習到能夠寫 OS 的部份就夠用。\n\nprocess 一章花了我不少的腦力, source code 之前沒有秘密, 透過 bochs 一步一步的追蹤組合語言指令, 終於了解 process 切換的秘密。 不過一次要吸收 timer 中斷和process 複雜的堆疊切換, 實在痛苦, 卡關好久之後才能理解, 不過要寫好這段程式似乎不容易, 總是有著其他錯誤, 久久無法排除。\n\n鍵盤驅動程式比我想的還要複雜, 若螢幕顯示的難度是 1 的話, 鍵盤驅動程式大概是\n10 吧！程式碼複雜許多, 會用到類似 finite state machine 的觀念, 不過比起\nprocess 切換, 容易多了。最後會完成一個 tty。\n\nIPC 使用的方式是類似 micro kernel 的方式來實作, 和 linux monolithic kernel 方式不同, 這邊也算好理解。\n\n檔案系統以及 fork 的實作也很精彩, 我終於知道 fork 是怎麼實作的。\n不過是描述 ide, 並不是 sata, 這比較可惜。\n\n不過讀這本書有個問題, 要完全理解書上說的並非只是讀過就好, 還需要跟著實作, 用程式碼來體驗書中的描述。這也是雖然我看完卻還是要繼續跟著書中的程式碼, 打造起一個 os。\n\n書中知識對於工作上來說可能沒有立即的助益, 我會花時間研究完全只是為了想「知道」 從電腦一開機就執行的 os 程式是什麼樣子, 也認為完全自己動手完成所有的程式碼很酷, 老是用別人寫好的 library, 總覺得這程式不完全是自己寫的那樣, 成就感不高。想從這本書獲得在工作上的即戰力效應可能不高, 又要花費大量時間學習, 只推薦給有興趣學習的同好或是學生。能在學生時代就知道這些知識是比較好的, 配合作業系統課程, 相信能建立紮實的基礎, 面試能提到這部份的學習, 應該是大大加分。\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:52,
				author:"godspeedlee",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345199437.A.247.html",
				postDate:"2012/8/17 18:30 ",
				pttcomments:1,
				name :"調試九法：軟硬體錯誤的排查之道",
				type :"簡體書",
				buytime:"2009 ~ 2010",
				buyplace:"天瓏",
				link :"http://www.waterlike.com.tw/bookdata.asp?NO=TP3C113016",
				img :"http://www.waterlike.com.tw/image/book/TP3C113016.jpg",
				howtoget :"購買",
				why :"有人寫程式不需要debug嗎?",
				think :"這本書非常薄，大概不用一星期就看完了。這本書上找不到\n任何一種debug tool的用法，這本書的精華是把debug的九大\n原則提點出來，加以很多故事來解釋這些原則的重要性。\n\n例如\n\n逐字逐句閱讀整本手冊:\n\n現在大概很少人有這種耐性，不過有時候一些致命的細節\n就寫在沒人要看得手冊裡\n\n不要想，而要看:作者認為bug不是用猜的，讓證據說話\n\n一次改一個地方:這也蠻重要的，不過有耐心的RD真的很少..大家都想速成\n\n另外一個重要的原則是，當你覺得你已經把bug修正，除了把正確答案蓋上去\n之外，應該先重現一次bug，然後再用正確答案確認一次。自從小弟掌握這個\n原則之後，QA就很少來唸我了~\n\n這本書的缺點是，翻譯的5566，不過瑕不掩瑜。我個人覺得，假如我是主管，\n我會強迫屬下把這9條給我背下來XD\n\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:53,
				author:"lovdkkkk",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345255102.A.50F.html",
				postDate:"2012/8/18 09:58 ",
				pttcomments:14,
				name :"Introduction to Algorithms - Second Edition",
				type :"英文書",
				buytime:"2002",
				buyplace:"天瓏",
				link :"http://www.amazon.com/Introduction-Algorithms-Second-Edition-Thomas/dp/0262032937",
				img :"http://ecx.images-amazon.com/images/I/51n%2B3GEQvYL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg",
				howtoget :"購買",
				why :"演算法課程需要",
				think :"值得一提的是 google \"algorithm amazon\"\n這本書在第一頁的第一項\n\n這本書內容很多而且詳細\n包含基礎概念, 排序, 一堆有的沒的資料結構,\n基礎圖論, 一些特選應用例如字串比對等,\n共有 35 大章, 詳細的文字說明適當地穿插著圖表及公式等\n\n每一個小章節的後面會有一些相關問題可做練習,\n也有簡短的摘要供快速複習\n\n有句話說語言只是實現想法的工具, 重要的是想法,\n我說重要的不是想法,\n而是 \"精確, 易於實現, 容易轉成程式\" 的想法\n\n那想法怎麼來呢?\n就算有的話夠不夠實際? 可行性高嗎?\n夠不夠精確? 轉換成程式要再花多少努力?\n這本書就是在教如何去思考以解決問題,\n讓你能提出夠實際並容易實現的想法\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:54,
				author:"lovdkkkk",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345256444.A.38C.html",
				postDate:"2012/8/18 18:20",
				pttcomments:2,
				name :"Introduction to Graph Theory",
				type :"英文書",
				buytime:"2009",
				buyplace:"Amazon",
				link :"http://www.amazon.com/Introduction-Graph-Theory-2nd-Edition/dp/0130144002",
				img :"http://ecx.images-amazon.com/images/I/411MB7J0KWL._SL500_AA300_.jpg",
				howtoget :"購買",
				why :" 個人研究",
				think :"這本書一樣在搜尋的第一筆\n專注在 Graph 的部份, 除了開頭的一些說明簡介,\n和基本的漢彌爾頓跟尤拉外, 主要內容偏重在證明推導,\n很適用拿來做頭腦體操\n\n總共有 8 大章, 每一章再分數小章,\n每一小章的後面都有 50 題上下的練習題,\n一題代表的可能是過去的某一篇論文\n\n題目難度不低  即使估狗到解答,\n可能看著解答都得想上幾小時才想得通,\n沒估狗到的話一題可以玩味數小時到數週不等\n\n書後的附錄也很不錯, 有詳述一些數學上的背景知識,\n以及參考文獻等可供參考\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:55,
				author:"tyc5116",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345274100.A.A5A.html",
				postDate:"2012/8/18 15:14",
				pttcomments:14,
				name :"重構-改善既有程式的設計",
				type :"翻譯書",
				buytime:"2012/2",
				buyplace:"實體書店(新竹)",
				link :"http://www.tenlong.com.tw/items/9861547533?item_id=45657",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/46024/medium/9789861547534.jpg",
				howtoget :"購買",
				why :"某個版上看到推薦",
				think :"超讚的,裡面包含了將近七十種重構的手法,目的在於讓原有的程式\n\n看起來更為簡潔,以便於日後的維護,擴充等等,重點在於每個重構手法都不難\n\n學習難度不高\n\n(不過難是難在於實務上如何應用這些手法啦...)\n\n比起其它進階的書在説明一些coding的手法(比如說template)\n\n先學習重構的手法更為實用\n\n原因在於即使使用了較高明的撰寫手法(如template)\n\n其它人不見得看的懂(甚至沒學過),接手就不容易\n\n但重構不同,好的重構結果,程式是很容易理解的\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:56,
				author:"BearWu",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345546559.A.2A2.html",
				postDate:"2012/8/21 18:55 ",
				pttcomments:2,
				name :"工程師突擊－SAP ABAP實用程序開發攻略",
				type :"簡體書",
				buytime:"2011.10.30",
				buyplace:"博客來",
				link :"http://www.books.com.tw/exep/prod/china/chinafile.php?item=CN10424832",
				img :"http://im1.book.com.tw/exep/lib/image.php?image=http://addons.books.com.tw/G/CN1/2/CN10424832.jpg&width=200&height=280&quality=80",
				howtoget :"購買",
				why :"工作需要，從未學過SAP相關程式語言開發，因此買了這本書看一下ABAP的介紹",
				think :"SAP相關的書籍，繁體書還蠻少的，有關於SAP相關的程式開發ABAP語言\n\n在這本書當中會逐一的介紹，從一開始的語法，到之後的INTERNAL TABLE的運用\n\n還有包含ALV表格、SMARTFORM、BDC錄製、報表設計，此書都有簡略介紹其功能\n\n及相關語法\n\n此外本書也有提供相關的FUNCTION介紹，是一本介紹還蠻清楚的書\n\n雖然是簡體書，但是閱讀上並不會有困難，字都還蠻淺顯易懂的。\n\n\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:57,
				author:"descent",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345644113.A.E30.html",
				postDate:"2012/8/22 22:01 ",
				pttcomments:1,
				name :"Rebel Code (Linux 傳奇)",
				type :"繁體書",
				buytime:"2011/04/15",
				buyplace:"露天拍賣",
				link :"http://descent-incoming.blogspot.tw/2011/07/rebel-code-linux.html",
				img :"https://lh6.googleusercontent.com/-nwQWTZ7JqIQ/TiLwXLWH1EI/AAAAAAAASBo/uMU66q3Fmio/s400/IMGP6929.JPG",
				howtoget :"購買",
				why :"看到別人的分享",
				think :"中文版本錯字漏句很多, 排版也不算好, 翻譯也有些怪怪的, 那個誇張的目錄勘誤表也實在錯的離譜。這大概就是這本中文版的缺點了! 喔! 還有那個奇怪的中文書名: Linux 傳奇 - 讓比爾·蓋茲坐立難安的天才。取這書名的編輯, 我覺得也可算是天才, 還讓比爾·蓋茲坐立難安勒。\n    \n英文版本副標題: The Inside Story of Linux and the Open\nSource Revolution, 這才讓人看得懂這本書在談甚麼主題。\n英文版本:\nhttp://www.amazon.com/Rebel-Code-Linux-Source-Revolution/dp/0738203335\n\n內容我很喜歡, 喜歡到幾乎可忽略上述缺點, 相信只要是關心 opensource 的電腦玩家,應該都會喜愛這本書的內容。emacs, bison, gcc, sendmail, bind, fetchmail, tex,apache, perl, linux ... 這些自由軟體的故事就在本書中一一闡述, 有在關心開放原始碼運動的電腦玩家, 想必也會想知道這些自由軟體的故事, 讀這本書就對了。\n\n談到軟體, 怎麼可能沒提到寫出這些軟體的電腦駭客:RMS, Donald Knuth, Linus\nTorvalds, Larry Wall, 還有其他我記不起來的複雜英文名字。patch 原來是 LarryWall 為了處理 patch 而寫的 (這應該只有在作 patch 的程式設計師才看得懂); 為甚麼 emacs 會使用 lisp, 原來是這樣, 有種豁然開朗的感覺。\n\n若你對我提的軟體、人名完全不熟悉, 這本書可能不適合你, 它針對的讀者群實在太鮮明了, 雖然中文版的書名也許可以吸引其他領域的人注意, 但我相信應該很少人讀得懂也讀得有興趣。就像有本書在講音樂大師的故事, 海頓、貝多芬 ... 那不會是非音樂領域的人感興趣的。\n",
				worth :"Yes",
				suggest:"***"
			},
			{
				seqNo:58,
				author:"jay101",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1345712227.A.FB5.html",
				postDate:"2012/8/23 16:57 ",
				pttcomments:2,
				name :"浪潮之巔",
				type :"繁體書",
				buytime:"2012/7",
				buyplace:"天瓏",
				link :"http://www.tenlong.com.tw/items/9862015713?item_id=434567",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/68644/medium/PG21215.jpg",
				howtoget :"購買",
				why :"同學推這本說不錯",
				think :" 簡單來說就是本科技發展的歷史書籍。\n 作者透過不同的科技公司來說明每個科技公司的大起大落\n 由此來推論出未來在科技業可能出現的新浪潮!!\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:59,
				author:"dryman",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1347002752.A.AFE.html",
				postDate:"2012/9/7 15:25",
				pttcomments:1,
				name :"iOS Programming, the big nerd ranch guide",
				type :"英文書",
				buytime:"2012/7",
				buyplace:"天瓏",
				link :"http://www.amazon.com/iOS-Programming-Ranch-Edition-Guides/dp/0321821521",
				img :"http://ecx.images-amazon.com/images/I/612SP7%2By1OL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg",
				howtoget :"購買",
				why :"這是一本相當適合初學者完整學習iOS程式設計的書\n即使是有經驗的iOS程式開發人員也能從書中學到不少東西",
				think :"坊間現在iOS的書籍也愈來愈多了，但真正好的教學卻很少見\niOS BNR是一本深入淺出的好書，從基本的objective c架構原理\n、UIKit講解、到複雜的多核運算、異步網路下載都有教學\n\n這本書是假設使用者沒有objetive-c的程式概念來起步的，書本的\n教學會讓你懂\n1. objective-c 程式語言，了解 @property, @synthesize, weak,\n   strong, assign, categories 等等是在幹什麼用的。\n2. 重要的大概念，包括記憶體管理、delegate的使用方式、protocols\n3. 如何駕馭cocoa frameworks。只有學會語言是不夠的，蘋果程式\n   開發與framework緊緊聯繫。在書中你能學會如何用少量的code\n   配合framework來架構出新潮且值錢的好程式。\n\n\n這本書相當不錯，但不會是你的最後一本iOS開發相關的書。我自己\n入手的iOS書有iOS BNR, pro iOS Apps performance optimization\n(Apress,) iOS 5 programming pushing the limits (WILEY.)\n其中以pushing the limits最難。但就算都看完了，其實還是會有很\n多開發實務在書中沒教，例如深入的了解grand central dispatch,\ncore animation, quartz 2D, AVFoundation...etc.\n就我個人的情況是，這三本書帶我入門，剩下的就是從WWDC影片還有\n線上的reference學。難易度是\niOS BNR <= pro iOS performance optimization << pushing the limits\n< WWDC videos ~ apple programming guides << raw references\n\n很多開發技巧根本只能從raw references裡面撈啊\n例如core animation的CADisplaylinks...\n順便廣告一下，下禮拜有cocoa heads taipei\nhttp://registrano.com/events/6f702c\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:60,
				author:"dlackty",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1347033902.A.0E4.html",
				postDate:"2012/9/8 00:04 ",
				pttcomments:1,
				name :"Engineering Long-Lasting Software: An Agile Approach Using SaaS and Cloud Computing",
				type :"英文書",
				buytime:"2012/7",
				buyplace:"Amazon",
				link :"http://www.amazon.com/dp/B006WU5G4C",
				img :"http://ecx.images-amazon.com/images/I/51WZov9ZptL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA278_PIkin4,BottomRight,-70,22_AA300_SH20_OU01_.jpg",
				howtoget :"購買",
				why :"剛好在上本書作者搭配本書所設計的線上課程。\nhttps://www.edx.org/courses/BerkeleyX/CS169.1x/2012_Fall/about",
				think :"這本書的主題主要環繞在 SaaS，也就是 Software as a Service 的相關主題介\n紹，主要包含了雲端運算（以 AWS、 Heroku 為範例）、軟體工程（敏捷開發、\n需求分析、TDD 等）。\n\n在書中作者使用了 Ruby on Rails 作為搭配，一邊介紹 Rails 的開發、同時也\n帶入軟體工程的一些主題，例如書中會先介紹 MVC / Template 等 Design\nPatterns，然後以 Rails 為例子講解為何會有這樣的設計邏輯，跟要如何使用。\n\n本書的一大特點在於，作者花了很多心思設計實作的練習部分，每個範例程式講\n解在書的網站上都有操作影片可以參考，並且也針對了一般讀者感到困難的\nRails 環境架設部分，提供了可以直接下載運行的虛擬機環境。\n\n另外值得一提的是，本書搭配的免費線上課程也相當推薦，由作者親自錄影片上\n課、並且針對每一週的進度都有設計相對的程式作業，完成之後也可以上傳讓系\n統評分，對於有心要學習的讀者而言算是相當方便。\n",
				worth :"Yes",
				suggest:"****"
			},
			{
				seqNo:61,
				author:"TPWOLONG",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1347105756.A.CEF.html",
				postDate:"2012/9/8 20:02",
				pttcomments:16,
				name :"The Linux Programming Interface",
				type :"英文書",
				buytime:"2011",
				buyplace:"天瓏",
				link :"http://man7.org/tlpi/",
				img :"http://man7.org/tlpi/cover/TLPI-front-cover.png",
				howtoget :"購買",
				why :"同事推薦",
				think :"如果你是Linux application的 programmer\n這是一本極力推薦的\"must have\" 書本內容鉅細靡遺\n(舉凡 file I/O, process, thread, IPC,\n     signal handling, socket programming...)\n重點是寫的淺顯易懂又不失深度 而且幾乎每節都有範例程式\n如果把這本跟 bible \"Advanced Programming in the UNIX Environment\"\n比較, 我會比較推薦這本 雖然這本書很貴 又很厚 不過看完絕對值得\n有興趣的人可以查一下網路上的評價 一致好評!!\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:62,
				author:"snaketsai",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1347121690.A.9D9.html",
				postDate:"2012/9/9 00:28",
				pttcomments:3,
				name :"The Art of Unix Programming(Unix編程藝術)",
				type :"英文書",
				buytime:"2012/9",
				buyplace:"台北光華大享書局",
				link :"http://www.tenlong.com.tw/items/0131429019?item_id=19757",
				img :"http://ecx.images-amazon.com/images/I/51iyn7kz0uL.jpg",
				howtoget :"購買",
				why :"便宜又據說是經典",
				think :"技術細節小弟我就不獻醜了，板上玩*nix玩很深的高手很多；\n所以我就只說一些比較「屁」一點的東西。\n\n\"Those who don't know UNIX are condemned to reinvent it, poorly.\"\n(不懂Unix的人註定要重新製作一個，而且是跛腳版本的。)\nHenry Spencer ,1987 Nov. on Usenet\n\n開卷第一章的第一句話就是這玩意，不用說馬上惹毛了一海票人。\n\"Joel on Software\"的那位Joel大叔就曾經在不少文章裡面開砲過，\n覺得Unix的很多擁護者所秉持的根本只是另一種沙文思想。\n\n其中打的最大力的，莫過於這本書的7.3.3節裡面所提及、視線程(Thread)為原罪的思想、\n作者也附上了叫做\"Why threads are bad idea\"(為什麼線程是餿主意)這本書作為引證。\n\n相較於Windows NT跟其他完全支援 進程/線程模型 的核心；\n*nix雖然在POSIX裡建立起了線程模型(即著名的Pthread)，\n但是很多老一派的*nix coder，其實還是偏好透過IPC來進行操作。\n而Linux更是一種極端，以輕量化進程(Lightweighted Process)來實作線程。\n\n但是就實際意義上來說，兩著的目的其實是一樣的；\n就好像語言戰爭一樣，「宗教意義」遠大於技術問題。\n\n而Joel開砲歸開砲，他也承認很多Unix的設計哲學是值得借鏡的。\n譬如說KISS - - Keep It Simple & Stupid.\n\n在這裡作者提到*nix很注重兩點- -「緊湊性」與「正交性」。\n\n「緊湊性」這點其實就是指工具程式本身需簡單、易懂、好用；\n作者在這裡也提供了一個他認為很實在的檢驗方式- -\n「能不能只背七個參數，就發揮這個工具的99%功能。」\n\nGcc就是個很直接的例子。\n我剛開始在Linux上寫C時，\n只會下gcc -o output input.c，\n而且就這樣活得好好的搞了一年多，\n才因為要研究elf結構跟nasm，而去man它(看它提供的幫助文件)。\n\ntop這個拿來看些進程資訊的工具也非常簡單易用。\n看到某個程序當掉了，直接按k就可以送出SIGKIL去終結它。\n\n還有make這個工具，就相當於windows底下的InstallShield。\n*nix的Coder在寫好程式的同時，如果想發佈給別人，就必須把makefile寫好，\n使用者基本上只需要下./configure 再make,make install便萬事搞定。\n\n「正交性」這點，則是指程式盡量作功能的分立最大化，而不會互相干擾。\n舉例而言，如果使用了*nix的open() sys call，\n我們打開檔案後就可以理所當然的進行寫入，\n使用者不用進行額外的鎖定。\n\n其他特性的話，包括萬物皆文件(*)這個特點，如：\n/proc/cpuinfo 這個「檔案」包含了cpu幾乎所有的相關資訊\n/proc/meminfo 是記憶體的狀況\n/proc/mount 是目前掛載上的檔案系統有哪些\n而他們都可以用萬能的標準輸出工具- -cat來將這些東西輸出成文字檔，供人查看。\n很多*nix下好用的系統管理工具，也都是這些「文件」結合一些工具的再包裝，\n而這點正也是*nix很重要的「最大程度重複利用」的哲學。\n\n(*其實有例外，bind,accept......這些來自BSD Socket的比較特殊)\n\n\n言而總之，*nix很多的地方是值得學習、加以利用的，\n即便不是*nix使用者，其實也可以試著讀讀看，並將它用在其他的地方。\n就像Windows在後來也提供了基於Windows自身System Call的Interix。\n\n而這本《The Art of Unix Programming》則是系統化整理的集大成者，\n有興趣的真的可以買回去翻一翻(拜託天瓏別倒啊QAQ)\n\n",
				worth :"Yes",
				suggest:"*****"
			},
			{
				seqNo:63,
				author:"abcde1234",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1347126615.A.CEB.html",
				postDate:"2012/9/9 01:50",
				pttcomments:2,
				name :"找出 IT 產業的蠢事",
				type :"翻譯書",
				buytime:"2012",
				buyplace:"圖書館借閱",
				link :"http://www.kingstone.com.tw/book/book_page.asp?kmcode=2014840016464",
				img :"http://img.kingstone.com.tw/Book/images/Product/20148/2014840016464/2014840016464b.jpg",
				howtoget :"圖書館借閱",
				why :"看到《約耳趣談軟體》的下面這篇，有興趣而找來的\n http://www.csie.ntu.edu.tw/~p92005/Joel/Stupidity.html",
				think :"年代來講，2003年的書藉細說這二十年來的歷史，並不算是個足夠的近代史。\n如果想找本IT近代史的話我推薦《浪潮之顛》。但是在約耳(Joel Spolsky)的那篇\n序我覺得有一點很有趣，就是公司的衰弱通常都是犯了一些大錯，而本書的作者\nRick Chapman將這些東西深入地介紹一遍。\n年輕一輩的我在閱讀上是有點吃力的，在這之前我沒聽過MicroPro這間曾經壓\n過微軟的軟體商，更別提Lotus 123, PC Junior還是OS/2。所以看了這本還要順便\n通通過去的經脈。\n\n就內容而言，Rick Chapman做了很多整理並分析了許多人該知道的血淚歷史，\n許多內容絕對值得吸收。在網路上找到了一份很好的書評，有蠻大比重的簡介，我\n就不多著墨於摘要的部分。\nhttp://ihower.tw/blog/archives/1345/\n\n比較令人感到煩燥的是文句的通順品質。可能是背景知識不夠，會讓人覺得有\n時候不知道自己在讀什麼。在這方面就比較喜歡《約耳趣談軟體》這種敘事方式，\n但是也許不能在這種細節故事中使用。而且通順品質個人偏見是翻譯相關，譯者是\n大陸人、從簡中到繁中應該是要再花很多時間校過，文句看似沒有大問題，但是內\n容不好吸收、有時候還得再拿出原文對照該段在寫什麼。建議不怕英文的人可以讀\n原文。\n",
				worth :"Yes",
				suggest:"***"
			},
			{
				seqNo:64,
				author:"abcde1234",
				pttLink:"http://www.ptt.cc/bbs/Soft_Job/M.1347589132.A.D50.html",
				postDate:"2012/9/14 10:18",
				pttcomments:2,
				name :"與熊共舞：軟體專案的風險管理",
				type :"翻譯書",
				buytime:"2012",
				buyplace:"圖書館借閱",
				link :"http://www.tenlong.com.tw/items/986788924X?item_id=23669",
				img :"http://d2hsbzg80yxel6.cloudfront.net/images/23817/medium/9789867889249.jpg",
				howtoget :"圖書館借閱",
				why :"經典好書不看嗎？",
				think :"讀完了這本書，我正式成為Tom DeMarco的Fan了。\n(之前讀了Peopleware和最後期限，也是很好的書)\n\n和書名的副標一樣，這本書在講的是軟體業中的風險管理。基本上閱讀起來既\n輕鬆又能學到風險管理是怎麼一回事。把一些複雜的random variable運算都略過\n，但又不會失去太多味道。連像我這種對風控完全沒有概念的人也可以懂得他講的\n名詞是什麼意思。\n\n書的架構安排很好，從什麼是風險、為什麼要管理、不管理會怎樣、一般人怎\n麼做、怎麼開始、哪些是core risk、如何應付、怎麼簡單的縱觀專案風險大還是小\n(也就是量化)。\n\n我比較沒辦法體會的是實際上這套運作方式是不是真的能work？畢竟我還碰不\n到管理的部份。\n\n翻譯品質很好，文句大致都很好讀。不過很多隱藏的專有名詞都直接翻譯了，\n想知道原文名詞可以翻後面的index去逆向搜尋。\n",
				worth :"Yes",
				suggest:"*****"
			}
		];

 		db.collection('books', function(err, bookColls) {
 			bookColls.remove({});
			for(var i =0 ; i < books.length;++i){
				bookColls.save(books[i]);
			}
	   	});	


	}
};


(function /*daoinit*/(){
	var queue = [];
	var proxy = function(dao,ori){
		return function(){
			var named_arugments = arguments;
			if (!opened){
				queue.push(function(){
					ori.apply(dao,named_arugments);
				});
			}else{
				ori.apply(dao,named_arugments);
			}
		};
	}
	for(var k in dao){
		if (k != "_db"){
			dao[k] = proxy(dao,dao[k]);
		}
	}
	dao._init = function(){
		for(var i = 0 ; i < queue.length ;++i){
			queue[i]();
		}
		queue = null;
	}
	db.open(function(err) { 
	  if(err) throw err;
	  opened = true;
	  dao._init();
	});
})();

//var books ={
//	seqNo:,
//	author:"",
//	pttLink:"",
//	postDate:"2012/8/ ",
//	pttcomments:,
//	name :"",
//	type :"",
//	buytime:"",
//	buyplace:"",
//	link :"",
//	img :"",
//	howtoget :"",
//	why :"",
//	think :"",
//	worth :"Yes",
//	suggest:"*****"
//};
//


//dao.insertDefaultBook();
/*
dao.getBooks(function(){
	console.dir(arguments);
});  
*/
//dao.getBook(7,function(err,item){
//	console.log(item[0].think.replace(/\n/gi,"<br />"));
//});  
